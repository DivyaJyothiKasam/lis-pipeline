#!/usr/bin/env groovy

env.SLAVE_PIPELINE_NAME = "pipeline-developer-patch-runner"
env.SEND_EMAIL = true
env.BUILD_KERNEL_ARTIFACTS = true
env.KERNEL_ARTIFACTS_SMB_PATH = ""

properties ([
    overrideIndexTriggers(false),
    [$class: 'ParametersDefinitionProperty',
        parameterDefinitions: [
        [$class: 'ChoiceParameterDefinition',
            name: 'KERNEL_GIT_URL',
            choices: """git://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git\nhttps://git.kernel.org/pub/scm/linux/kernel/git/davem/net-next.git\nazure_kernel""",
            description: 'Kernel tree repo'],
        [$class: 'StringParameterDefinition',
            name: 'KERNEL_GIT_BRANCH',
            defaultValue: 'master',
            description: 'Branch to be built'],
        [$class: 'StringParameterDefinition',
            name: 'KERNEL_PATCH',
            defaultValue: "",
            description: 'Valid examples: \n scp://my-scp-hostname:/home/my-username/patch.p1 \n scp://my-username@my-scp-hostname:/home/my-username/patch.p1 \n http://my-website.com/patch.p1 \n Use the space separator for multiple patches.'],
        [$class: 'BooleanParameterDefinition',
            defaultValue: false,
            name: 'SKIP_UNPATCHED',
            description: 'Whether to skip unpatched run. No result comparison will be possible.'],
        [$class: 'ChoiceParameterDefinition',
            choices: """westus2\naustraliaeast\naustraliasoutheast\nbrazilsouth\ncanadacentral
                        canadaeast\ncentralindia\ncentralus\neastasia\neastus\neastus2\nfrancecentral
                        japaneast\njapanwest\nkoreacentral\nkoreasouth\nnorthcentralus\nnortheurope
                        southcentralus\nsoutheastasia\nsouthindia\nuksouth\nukwest\nwestcentralus
                        westeurope\nwestindia\nwestus\nsepremium""",
            name: 'LISAV2_AZURE_REGION',
            description: 'Azure Region'],
        [$class: 'BooleanParameterDefinition',
            defaultValue: true,
            name: 'RUN_AZURE_BOOT_TEST',
            description: 'Whether to run Azure Boot test'],
        [$class: 'BooleanParameterDefinition',
            defaultValue: false,
            name: 'RUN_AZURE_BOOT_STRESS_TEST',
            description: 'Whether to run Azure Boot Stress test'],
        [$class: 'ChoiceParameterDefinition',
            name: 'AZURE_BOOT_STRESS_VM_SIZE',
            choices: "Standard_A2\nStandard_E64_v3\nStandard_F72s_v2",
            description: 'Kernel tree repo'],
        [$class: 'BooleanParameterDefinition',
            defaultValue: false,
            name: 'RUN_AZURE_BVT_TESTS',
            description: 'Whether to run Azure basic validation tests'],
        [$class: 'BooleanParameterDefinition',
            defaultValue: false,
            name: 'RUN_HYPERV_BVT_TESTS',
            description: 'Whether to run HYPERV basic validation tests'],
        [$class: 'BooleanParameterDefinition',
            defaultValue: false,
            name: 'RUN_HYPERV_PERF_TESTS',
            description: 'Whether to run HYPERV performance tests'],
        [$class: 'StringParameterDefinition',
            name: 'HYPERV_SECOND_PERF_NODE',
            defaultValue: '',
            description: 'The second HyperV nodes. Every performance test requires two HyperV nodes, one being the node where the job runs and one defined here.'],
        [$class: 'BooleanParameterDefinition',
            defaultValue: false,
            name: 'RUN_AZURE_PERF_TESTS',
            description: 'Whether to run Azure performance tests']
        ]
    ]
])

// ****************
// PIPELINE HELPERS
// ****************

def getCommonParams(patches, buildTag) {
    return [
        string(name: 'KERNEL_GIT_URL', value: params.KERNEL_GIT_URL),
        string(name: 'KERNEL_GIT_BRANCH', value: params.KERNEL_GIT_BRANCH),
        string(name: 'KERNEL_ARTIFACTS_SMB_PATH', value: env.KERNEL_ARTIFACTS_SMB_PATH),
        string(name: 'KERNEL_PATCH', value: patches),
        booleanParam(name: 'BUILD_KERNEL_ARTIFACTS', value: env.BUILD_KERNEL_ARTIFACTS.toBoolean()),
        string(name: 'LISAV2_AZURE_REGION', value: params.LISAV2_AZURE_REGION),
        booleanParam(name: 'RUN_AZURE_BOOT_TEST', value: params.RUN_AZURE_BOOT_TEST),
        booleanParam(name: 'RUN_AZURE_BOOT_STRESS_TEST', value: params.RUN_AZURE_BOOT_STRESS_TEST),
        string(name: 'AZURE_BOOT_STRESS_VM_SIZE', value: params.AZURE_BOOT_STRESS_VM_SIZE),
        booleanParam(name: 'RUN_AZURE_BVT_TESTS', value: params.RUN_AZURE_BVT_TESTS),
        booleanParam(name: 'RUN_HYPERV_BVT_TESTS', value: params.RUN_HYPERV_BVT_TESTS),
        booleanParam(name: 'RUN_HYPERV_PERF_TESTS', value: params.RUN_HYPERV_PERF_TESTS),
        string(name: 'HYPERV_SECOND_PERF_NODE', value: params.HYPERV_SECOND_PERF_NODE),
        booleanParam(name: 'RUN_AZURE_PERF_TESTS', value: params.RUN_AZURE_PERF_TESTS),
        string(name: 'CUSTOM_BUILD_TAG', value: "${buildTag}-${BUILD_NUMBER}")
    ]
}


// *************
// PIPELINE MAIN
// *************


node ("meta_slave") {
    def runs = [:]
    def patchedRun, unpachedRun;
    def patchedParams = getCommonParams(env.KERNEL_PATCH, "patched")

    stage ("test_kernels") {
            runs["kernel_patched"] = {
                patchedRun = build job: "${env.SLAVE_PIPELINE_NAME}/${env.BRANCH_NAME}",
                             parameters: patchedParams, propagate: false;
            }
            if (!params.SKIP_UNPATCHED) {
                def unpatchedParams = getCommonParams("", "unpatched")
                runs["kernel_unpatched"] = {
                    unpatchedRun = build job: "${env.SLAVE_PIPELINE_NAME}/${env.BRANCH_NAME}",
                                   parameters: unpatchedParams, propagate: false;
                }
            }
            parallel runs
    }

    stage ("compare_results") {
        dir ('aggregate_results' + env.BUILD_NUMBER + env.BRANCH_NAME) {
            echo "Aggregate results"
            copyArtifacts(projectName: "${env.SLAVE_PIPELINE_NAME}/${env.BRANCH_NAME}", selector: specific("${patchedRun.number}"), target: "patched_run");
            sh '''
                #!/bin/bash
                set -xe
                output_file="${WORKSPACE}/aggregate_results${BUILD_NUMBER}${BRANCH_NAME}/aggregate-junit.xml"
                cd "${WORKSPACE}/aggregate_results${BUILD_NUMBER}${BRANCH_NAME}/patched_run/Report/"
                echo "<testsuites>" >> "${output_file}"
                for filename in AZURE_BOOT_TEST AZURE_BOOT_STRESS_TEST AZURE_BVT_TESTS HYPERV_PERF_TESTS HYPERV_BVT_TESTS AZURE_PERF_TESTS; do
                    if [ -f "${filename}.xml" ]; then
                        sed -i "s/LISAv2Test/LISAv2Patched-${filename}/g" "${filename}.xml"
                        grep -v '<testsuites>\\|</testsuites>' "${filename}.xml" >> "${output_file}"
                    fi
                done
            '''
            if (!params.SKIP_UNPATCHED) {
                copyArtifacts(projectName: "${env.SLAVE_PIPELINE_NAME}/${env.BRANCH_NAME}", selector: specific("${unpatchedRun.number}"), target: "unpatched_run");
                sh '''
                    #!/bin/bash
                    set -xe
                    output_file="${WORKSPACE}/aggregate_results${BUILD_NUMBER}${BRANCH_NAME}/aggregate-junit.xml"
                    cd "${WORKSPACE}/aggregate_results${BUILD_NUMBER}${BRANCH_NAME}/unpatched_run/Report/"
                    for filename in AZURE_BOOT_TEST AZURE_BOOT_STRESS_TEST AZURE_BVT_TESTS HYPERV_PERF_TESTS HYPERV_BVT_TESTS AZURE_PERF_TESTS; do
                        if [ -f "${filename}.xml" ]; then
                            sed -i "s/LISAv2Test/LISAv2Unpatched-${filename}/g" "${filename}.xml"
                            grep -v '<testsuites>\\|</testsuites>' "${filename}.xml" >> "${output_file}"
                        fi
                    done
                '''
            }
            sh '''
                #!/bin/bash
                set -xe
                output_file="${WORKSPACE}/aggregate_results${BUILD_NUMBER}${BRANCH_NAME}/aggregate-junit.xml"
                echo "</testsuites>" >> "${output_file}"
            '''
            junit "aggregate-junit.xml"
            archiveArtifacts 'aggregate-junit.xml'

            sh "junit2html aggregate-junit.xml results.html"
            archiveArtifacts 'results.html'

            if (env.SEND_EMAIL) {
                mailBody = "Hello,</br></br>\n</br>\n"
                mailBody = "<h2> Developer Patch Validation Pipeline #${env.BUILD_NUMBER} has completed. <a href='${env.BUILD_URL}'> Job url >>.</a></h2>"
                if (env.KERNEL_PATCH && env.KERNEL_PATCH != '') {
                    mailBody += "The following patches were applied:</br>\n"
                    patches = env.KERNEL_PATCH.split(" ")
                    patches.each(){
                        mailBody += it + "</br>\n"
                    }
                }
                mailBody += readFile("results.html")
                emailext (
                    subject: "Developer patch validation report for run: #${env.BUILD_NUMBER}.",
                    recipientProviders: [[$class: 'RequesterRecipientProvider']],
                    mimeType : "text/html",
                    body: mailBody
                )
                deleteDir()
            }
        }
    }
}
