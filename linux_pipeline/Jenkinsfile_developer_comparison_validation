#!/usr/bin/env groovy

properties ([
    [$class: 'ParametersDefinitionProperty',
        parameterDefinitions: [
        [$class: 'ChoiceParameterDefinition',
            choices: 'git://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git\nhttps://git.kernel.org/pub/scm/linux/kernel/git/davem/net-next.git\nazure_kernel',
            name: 'KERNEL_GIT_URL',
            description: 'Kernel tree repo'],
        [$class: 'StringParameterDefinition',
            name: 'KERNEL_GIT_BRANCH',
            defaultValue: 'master',
            description: 'Branch to be built'],
        [$class: 'StringParameterDefinition',
            defaultValue: '',
            name: 'KERNEL_PATCH',
            description: 'Valid examples: \n scp://my-scp-hostname:/home/my-username/patch.p1 \n scp://my-username@my-scp-hostname:/home/my-username/patch.p1 \n http://my-website.com/patch.p1 \n Use the space separator for multiple patches.'],
        [$class: 'ChoiceParameterDefinition',
            choices: 'no\nyes',
            name: 'SKIP_UNPATCHED',
            description: 'Skip unpatched kernel validation'],
        [$class: 'ChoiceParameterDefinition',
            choices: "kernel_pipeline_fvt.xml\nkernel_pipeline.bvt.xml\ntest_kernel_pipeline.xml",
            name: 'LISA_TEST_XML',
            description: 'Which tests should LISA run'],
        [$class: 'ChoiceParameterDefinition',
            choices: 'all\nCore (fvt)\nStorage (fvt)\nNetwork_and_Stress (fvt)\nMemory (fvt)',
            name: 'LISA_TEST_SUITE',
            description: 'LISA test suite'],
        [$class: 'ChoiceParameterDefinition',
            choices: 'TCP\nUDP\nFIO',
            name: 'LISA_PERF_TEST',
            description: 'Which perf test to run'],
        [$class: 'ChoiceParameterDefinition',
            choices: 'v4\nv6',
            name: 'PERF_IPV',
            description: 'IP version to use.(Only used for networking perf test)'],
        [$class: 'ChoiceParameterDefinition',
            choices: '1\n2\n4\n8\n16\n32\n64\n128\n256\n512\n1024',
            name: 'PERF_NET_THREADS',
            description: 'TEST_THREADS for TCP. CONNECTION POOL for UDP'],
        [$class: 'ChoiceParameterDefinition',
            choices: '1\n2\n4\n8\n16\n32\n64\n128\n256',
            name: 'PERF_Q_DEPTH',
            description: 'Q_DEPTH for FIO'],
        [$class: 'StringParameterDefinition',
            name: 'ENABLED_STAGES',
            defaultValue: 'build_artifacts, publish_temp_artifacts, boot_test, publish_artifacts, validation, validation_functional, validation_perf, validation_functional_hyperv, validation_functional_azure, validation_perf_hyperv',
            description: 'What stages to run. By default all stages are enabled']
        ]
    ]
])

def perfXml = ["TCP": "TCP_SRIOV_v4.xml", "UDP":"UDP_SRIOV_v4.xml", "FIO": "FIO_RAID0_Pipeline.xml"]

def getPerfOptions(perf_test) {
    switch (perf_test) {
        case ["TCP", "UDP"]:
            return "IPV=" + PERF_IPV + ";NET_THREADS=" + PERF_NET_THREADS
        case "FIO":
            return "Q_DEPTH=" + PERF_Q_DEPTH
    }
}

node ("meta_slave") {
    def runs = [:]
    def patchedRun, unpachedRun;

    if (LISA_TEST_SUITE == 'all') {
        LISA_TEST_SUITE = ''
    } else {
        LISA_TEST_SUITE = LISA_TEST_SUITE.split(" ")[0].toLowerCase()
    }
    
    PERF_OPTIONS = getPerfOptions(LISA_PERF_TEST)

    stage ("test_kernels") {
            runs["kernel_patched"] = {
                patchedRun = build job: "pipeline-developer-patch-validation/PR-200", parameters: [
                    string(name: 'KERNEL_GIT_BRANCH', value: "${KERNEL_GIT_BRANCH}"),
                    string(name: 'KERNEL_GIT_URL', value: "${KERNEL_GIT_URL}"),
                    string(name: 'KERNEL_PATCH', value: "${KERNEL_PATCH}"),
                    string(name: 'CUSTOM_BUILD_TAG', value: "patched-${BUILD_NUMBER}"),
                    string(name: 'LISA_TEST_XML', value: "${LISA_TEST_XML}"),
                    string(name: 'LISA_TEST_SUITE', value: "${LISA_TEST_SUITE}"),
                    string(name: 'LISA_PERF_TEST_XML', value: "${perfXml[LISA_PERF_TEST]}"),
                    string(name: 'LISA_PERF_OPTIONS', value: "${PERF_OPTIONS}"),
                    string(name: 'ENABLED_STAGES', value: "${ENABLED_STAGES}")], propagate: false;
            }
            if (env.SKIP_UNPATCHED == 'no') {
                runs["kernel_unpatched"] = {
                    unpatchedRun = build job: "pipeline-developer-patch-validation/PR-200", parameters: [
                        string(name: 'KERNEL_GIT_BRANCH', value: "${KERNEL_GIT_BRANCH}"),
                        string(name: 'KERNEL_GIT_URL', value: "${KERNEL_GIT_URL}"),
                        string(name: 'CUSTOM_BUILD_TAG', value: "unpatched-${BUILD_NUMBER}"),
                        string(name: 'LISA_TEST_XML', value: "${LISA_TEST_XML}"),
                        string(name: 'LISA_TEST_SUITE', value: "${LISA_TEST_SUITE}"),
                        string(name: 'LISA_PERF_TEST_XML', value: "${perfXml[LISA_PERF_TEST]}"),
                        string(name: 'LISA_PERF_OPTIONS', value: "${PERF_OPTIONS}"),
                        string(name: 'ENABLED_STAGES', value: "${ENABLED_STAGES}")], propagate: false;
                }
            }
            parallel runs
    }

    stage ("aggregate_results") {
        dir ('comparison_results' + env.BUILD_NUMBER) {
            copyArtifacts(projectName: 'pipeline-developer-patch-validation/PR-200', selector: specific("${patchedRun.number}"), target: "patched_run");
            archiveArtifacts 'patched_run/**';
            if (env.SKIP_UNPATCHED == 'no') {
                copyArtifacts(projectName: 'pipeline-developer-patch-validation/PR-200', selector: specific("${unpatchedRun.number}"), target: "unpatched_run");
                archiveArtifacts 'unpatched_run/**';
                stash includes: 'patched_run/*-functional/TestResults/**/Report*.xml', name: 'patchedReport'
                stash includes: 'unpatched_run/*-functional/TestResults/**/Report*.xml', name: 'unpatchedReport'
                stash includes: 'patched_run/*-perf/lis-test/WS2012R2/lisa/TestResults/', name: 'patchedPerf'
                stash includes: 'unpatched_run/*-perf/lis-test/WS2012R2/lisa/TestResults/', name: 'unpatchedPerf'
                stash includes: 'unpatched_run/scripts/package_building/kernel_versions.ini', name: 'unpatchedMetadata'
            }
        }
    }

    stage ("compare_results") {
        if (env.SKIP_UNPATCHED == 'no') {
            dir('comparison_results' + env.BUILD_NUMBER) {
                sh 'rm -rf *'
                checkout scm
                unstash 'patchedReport'
                unstash 'unpatchedReport'
                unstash 'patchedPerf'
                unstash 'unpatchedPerf'
                unstash 'unpatchedMetadata'
                sh '''#!/bin/bash
                    INI_PATH="./unpatched_run/scripts/package_building/kernel_versions.ini"
                    echo '[METADATA]' > ./metadata.ini
                    KERNEL="$(crudini --get $INI_PATH KERNEL_BUILT folder)"
                    KERNEL="${KERNEL%-unpatched*}"
                    echo "KERNEL_VERSION = $KERNEL" >> ./metadata.ini
                    BRANCH="$(crudini --get $INI_PATH KERNEL_BUILT branch)"
                    echo "BRANCH = $BRANCH" >> ./metadata.ini
                    echo "LISA_XML = ${LISA_TEST_XML}" >> ./metadata.ini
                    if [[ ${LISA_TEST_SUITE} != "" ]];then
                        echo "LISA_TEST_SUITE = ${LISA_TEST_SUITE}" >> ./metadata.ini
                    fi
                    if [[ ${LISA_PERF_TEST} != "" ]];then
                        echo "LISA_PERF_TEST = ${LISA_PERF_TEST}" >> ./metadata.ini
                    fi
                '''
                sh '''
                    python3 scripts/comparison/compare_results.py \\
                        --patchedresults ./patched_run/*-functional/TestResults/**/Report*.xml \\
                        --unpatchedresults ./unpatched_run/*-functional/TestResults/**/Report*.xml \\
                        --output results_func.html --metadata ./metadata.ini
                '''
                sh '''
                    python2.7 scripts/comparison/parse_perf_results.py \\
                        --logspath ./patched_run/*-perf/lis-test//WS2012R2/lisa/TestResults/"${LISA_PERF_TEST}"* \\
                        --comparewith ./unpatched_run/*-perf/lis-test//WS2012R2/lisa/TestResults/"${LISA_PERF_TEST}"* \\
                        --testtype "${LISA_PERF_TEST}" --output results_perf.html
                '''
                sh 'cat results_func.html results_perf.html > results.html'
                archiveArtifacts 'results.html'
            }
        } else {
            println ("Comparison between patched/unpatched test results was skipped as no unpatched test results are available")
        }
    }
}
