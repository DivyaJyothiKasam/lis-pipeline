#!/usr/bin/env groovy

properties ([
    [$class: 'ParametersDefinitionProperty',
        parameterDefinitions: [
        [$class: 'ChoiceParameterDefinition',
            choices: 'git://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git\nhttps://git.kernel.org/pub/scm/linux/kernel/git/davem/net-next.git\nazure_kernel',
            name: 'KERNEL_GIT_URL',
            description: 'Kernel tree repo'],
        [$class: 'StringParameterDefinition',
            name: 'KERNEL_GIT_BRANCH',
            defaultValue: 'master',
            description: 'Branch to be built'],
        [$class: 'ChoiceParameterDefinition',
            choices: 'no\nyes',
            name: 'SKIP_UNPATCHED',
            description: 'Skip build and test for the unpatched kernel'],
        [$class: 'StringParameterDefinition',
            defaultValue: "test_kernel_pipeline.xml",
            name: 'LISA_TEST_XML',
            description: 'Which tests should LISA run'],
        [$class: 'ChoiceParameterDefinition',
            choices: 'all\nkernel_validation_minimal',
            name: 'LISA_TEST_SUITE',
            description: 'LISA test suite (all if blank)'],
        [$class: 'StringParameterDefinition',
            defaultValue: '',
            name: 'KERNEL_PATCH',
            description: 'Valid examples: \n scp://my-scp-hostname:/home/my-username/patch.p1 \n scp://my-username@my-scp-hostname:/home/my-username/patch.p1 \n http://my-website.com/patch.p1 \n Use the space separator for multiple patches.'],
        [$class: 'StringParameterDefinition',
            name: 'ENABLED_STAGES',
            defaultValue: 'build_artifacts, publish_temp_artifacts, boot_test, publish_artifacts, validation, validation_functional, validation_perf, validation_functional_hyperv, validation_functional_azure, validation_perf_hyperv',
            description: 'What stages to run. By default all stages are enabled']
        ]
    ]
])

node ("meta_slave") {
    def runs = [:]
    def patchedRun, unpachedRun;
    
    if (LISA_TEST_SUITE == 'all'){
        LISA_TEST_SUITE = ''
    }
        
    stage ("test_kernels") {
            runs["kernel_patched"] = {
                patchedRun = build job: "pipeline-developer-patch-validation/master", parameters: [
                    string(name: 'KERNEL_GIT_BRANCH', value: "${KERNEL_GIT_BRANCH}"),
                    string(name: 'KERNEL_GIT_URL', value: "${KERNEL_GIT_URL}"),
                    string(name: 'KERNEL_PATCH', value: "${KERNEL_PATCH}"),
                    string(name: 'CUSTOM_BUILD_TAG', value: "patched-${BUILD_NUMBER}"),
                    string(name: 'LISA_TEST_XML', value: "${LISA_TEST_XML}"),
                    string(name: 'LISA_TEST_SUITE', value: "${LISA_TEST_SUITE}"),
                    string(name: 'ENABLED_STAGES', value: "${ENABLED_STAGES}")], propagate: false;
            }
            if (SKIP_UNPATCHED == 'no'){
                runs["kernel_unpatched"] = {
                    unpatchedRun = build job: "pipeline-developer-patch-validation/master", parameters: [
                        string(name: 'KERNEL_GIT_BRANCH', value: "${KERNEL_GIT_BRANCH}"),
                        string(name: 'KERNEL_GIT_URL', value: "${KERNEL_GIT_URL}"),
                        string(name: 'CUSTOM_BUILD_TAG', value: "unpatched-${BUILD_NUMBER}"),
                        string(name: 'LISA_TEST_XML', value: "${LISA_TEST_XML}"),
                        string(name: 'LISA_TEST_SUITE', value: "${LISA_TEST_SUITE}"),
                        string(name: 'ENABLED_STAGES', value: "${ENABLED_STAGES}")], propagate: false;
                }
            }
            parallel runs
    
    }
    stage ("aggregate_results") {
        dir ('comparison_results' + env.BUILD_NUMBER) {
            copyArtifacts(projectName: 'pipeline-developer-patch-validation/master', selector: specific("${patchedRun.number}"), target: "patched_run");
            archiveArtifacts 'patched_run/**';
            
            if (SKIP_UNPATCHED == 'no'){
                copyArtifacts(projectName: 'pipeline-developer-patch-validation/master', selector: specific("${unpatchedRun.number}"), target: "unpatched_run");
                archiveArtifacts 'unpatched_run/**';
                stash includes: 'patched_run/lis-test/WS2012R2/lisa/TestResults/**/Report*.xml', name: 'patchedReport'
                stash includes: 'unpatched_run/lis-test/WS2012R2/lisa/TestResults/**/Report*.xml', name: 'unpatchedReport'
            }
        }
    }
    stage ("compare_results") {
        if (SKIP_UNPATCHED == 'no'){
            dir('comparison_results' + env.BUILD_NUMBER) {
                checkout scm
                unstash 'patchedReport'
                unstash 'unpatchedReport'
                sh '''
                    python3 scripts/comparison/compare_results.py \\
                        --patchedresults ./patched_run/lis-test/WS2012R2/lisa/TestResults/**/Report*.xml \\
                        --unpatchedresults ./unpatched_run/lis-test/WS2012R2/lisa/TestResults/**/Report*.xml \\
                        --output results.html
                '''
                archiveArtifacts 'results.html'
            }
        } else {
            println ("Comparison between patched/unpatched test results was skipped as no unpatched test results are available")
        }
    }
}
