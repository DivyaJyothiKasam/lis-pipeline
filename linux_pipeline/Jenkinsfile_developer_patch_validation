#!/usr/bin/env groovy

env.LISAV2_REMOTE = "https://github.com/ader1990/LISAv2.git"
env.LISAV2_BRANCH = "perf_tc_common"
env.LISAV2_RG_IDENTIFIER = "developerk"
env.LISAV2_AZURE_UBUNTU_IMAGE_BIONIC = "Canonical UbuntuServer 18.04-DAILY-LTS latest"
env.LISAV2_HYPERV_UBUNTU_IMAGE_BIONIC = "Ubuntu_18.04.1"
env.LISAV2_AZURE_STRESS_TEST = "STRESSTEST-VERIFY-RESTART"
env.LISAV2_PERFORMANCE_TEST = "PERF-NETWORK-TCP-SINGLE-CONNECTION-THROUGHPUT-Synthetic"

env.KERNEL_ARTIFACTS_PATH = "dev-patch-kernels"
env.PACKAGE_TYPE = "deb"

def runs = [:]

properties ([
    overrideIndexTriggers(false),
    [$class: 'ParametersDefinitionProperty',
        parameterDefinitions: [
        [$class: 'ChoiceParameterDefinition',
            name: 'KERNEL_GIT_URL',
            choices: """git://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git\nhttps://git.kernel.org/pub/scm/linux/kernel/git/davem/net-next.git\nazure_kernel""",
            description: 'Kernel tree repo'],
        [$class: 'StringParameterDefinition',
            name: 'KERNEL_GIT_BRANCH',
            defaultValue: 'master',
            description: 'Branch to be built'],
        [$class: 'StringParameterDefinition',
            name: 'KERNEL_PATCH',
            defaultValue: "",
            description: 'Valid examples: \n scp://my-scp-hostname:/home/my-username/patch.p1 \n scp://my-username@my-scp-hostname:/home/my-username/patch.p1 \n http://my-website.com/patch.p1 \n Use the space separator for multiple patches.'],
        [$class: 'StringParameterDefinition',
            name: 'KERNEL_ARTIFACTS_SMB_PATH',
            defaultValue: "",
            description: 'The already built kernel artifacts path from the share. Ex: linux-next/linux-next-4.20.0-e6c7317-28112018-unpatched-19. BUILD_KERNEL_ARTIFACTS step has to be unchecked.'],
        [$class: 'BooleanParameterDefinition',
            defaultValue: true,
            name: 'BUILD_KERNEL_ARTIFACTS',
            description: 'Whether to build kernel artifacts'],
        [$class: 'ChoiceParameterDefinition',
            choices: """westus2\naustraliaeast\naustraliasoutheast\nbrazilsouth\ncanadacentral
                        canadaeast\ncentralindia\ncentralus\neastasia\neastus\neastus2\nfrancecentral
                        japaneast\njapanwest\nkoreacentral\nkoreasouth\nnorthcentralus\nnortheurope
                        southcentralus\nsoutheastasia\nsouthindia\nuksouth\nukwest\nwestcentralus
                        westeurope\nwestindia\nwestus\nsepremium""",
            name: 'LISAV2_AZURE_REGION',
            description: 'Azure Region'],
        [$class: 'BooleanParameterDefinition',
            defaultValue: true,
            name: 'RUN_AZURE_BOOT_TEST',
            description: 'Whether to run Azure Boot test'],
        [$class: 'BooleanParameterDefinition',
            defaultValue: false,
            name: 'RUN_AZURE_BOOT_STRESS_TEST',
            description: 'Whether to run Azure Boot Stress test'],
        [$class: 'ChoiceParameterDefinition',
            name: 'AZURE_BOOT_STRESS_VM_SIZE',
            choices: "Standard_A2\nStandard_E64_v3\nStandard_F72s_v2",
            description: 'Kernel tree repo'],
        [$class: 'BooleanParameterDefinition',
            defaultValue: false,
            name: 'RUN_AZURE_BVT_TESTS',
            description: 'Whether to run Azure basic validation tests'],
        [$class: 'BooleanParameterDefinition',
            defaultValue: false,
            name: 'RUN_HYPERV_BVT_TESTS',
            description: 'Whether to run HYPERV basic validation tests'],
        [$class: 'BooleanParameterDefinition',
            defaultValue: false,
            name: 'RUN_HYPERV_PERF_TESTS',
            description: 'Whether to run HYPERV performance tests'],
        [$class: 'StringParameterDefinition',
            name: 'HYPERV_SECOND_PERF_NODE',
            defaultValue: '',
            description: 'The second HyperV nodes. Every performance test requires two HyperV nodes, one being the node where the job runs and one defined here.'],
        [$class: 'BooleanParameterDefinition',
            defaultValue: false,
            name: 'RUN_AZURE_PERF_TESTS',
            description: 'Whether to run Azure performance tests'],
        [$class: 'StringParameterDefinition',
            name: 'CUSTOM_BUILD_TAG',
            defaultValue: "",
            description: 'Custom build tag for artifacts. If left undefined, BUILD_NUMBER will be used']
        ]
    ]
])

// ****************
// PIPELINE HELPERS
// ****************

def RunPowershellCommand(psCmd) {
    bat "powershell.exe -NonInteractive -ExecutionPolicy Bypass -Command \"[Console]::OutputEncoding=[System.Text.Encoding]::UTF8;$psCmd;EXIT \$global:LastExitCode\""
}

def getVhdLocation(basePath, distroVersion) {
    def distroFamily = distroVersion.split('_')[0]
    return "${basePath}\\" + distroFamily + "\\" + distroVersion + "\\" + distroVersion + ".vhdx"
}

def prepareEnv(branch, remote) {
    cleanWs()
    git branch: branch, url: remote
}

def unstashKernel(kernelStash) {
    unstash kernelStash
    powershell """
        \$rmPath = "\${env:ProgramFiles}\\Git\\usr\\bin\\rm.exe"
        \$basePath = "./${env.BUILD_NUMBER}-${env.BRANCH_NAME}-${kernelStash}/*/${env.PACKAGE_TYPE}"

        & \$rmPath -rf "\${basePath}/*dbg*"
        & \$rmPath -rf "\${basePath}/*devel*"
        & \$rmPath -rf "\${basePath}/*debug*"
    """
}
// buildKernel method is using params:
//     params.KERNEL_GIT_URL
//     params.KERNEL_GIT_BRANCH
//     params.KERNEL_PATCH
//     params.CUSTOM_BUILD_TAG
def buildKernel() {
    if (!params.CUSTOM_BUILD_TAG) {
        env.CUSTOM_BUILD_TAG = env.BUILD_NUMBER
    }
    withCredentials(bindings: [string(credentialsId: 'MSFT_KERNEL_GIT_URL', variable: 'MSFT_KERNEL_GIT_URL'),
                               string(credentialsId: 'SCP_USERNAME_DEFAULT', variable: 'SCP_USERNAME_DEFAULT')]) {
        sh '''#!/bin/bash
              set -xe -o pipefail
              if [[ "$KERNEL_GIT_URL" == "azure_kernel" ]]; then
                  KERNEL_GIT_URL=${MSFT_KERNEL_GIT_URL}
              fi
              echo "Building artifacts..."
              pushd "$WORKSPACE/scripts/package_building"
              echo ${KERNEL_PATCH} | tr ' ' '\n' > developer_patches
              i='0'
              IFS=$'\t\n'
              for url in $(cat developer_patches); do
                  i=$(( i + 1 ))
                  protocol=${url%%://*}
                  url=${url#*//}
                  test_user=${url%%*@*}
                  if [[ $protocol == "scp" ]] && [[ $test_user != "" ]]; then
                      sed -i "${i}s/.*/scp:\\/\\/$SCP_USERNAME_DEFAULT@${url//\\//\\\\/}/" developer_patches
                  fi
              done
              IFS=$' '
              bash build_artifacts.sh \\
                  --git_url "${KERNEL_GIT_URL}" \\
                  --git_branch "${KERNEL_GIT_BRANCH}" \\
                  --destination_path "${BUILD_NUMBER}-${BRANCH_NAME}-${KERNEL_ARTIFACTS_PATH}" \\
                  --install_deps "True" \\
                  --thread_number "x3" \\
                  --debian_os_version "16" \\
                  --build_path "/mnt/tmp/developer-kernel-build-folder" \\
                  --kernel_config "Microsoft/config-azure" \\
                  --clean_env "True" \\
                  --use_ccache "True" \\
                  --use_kernel_folder_prefix "True" \\
                  --clone_depth "1" \\
                  --patch_file "developer_patches" \\
                  --create_changelog "False" \\
                  --custom_build_tag="${CUSTOM_BUILD_TAG}"
              popd
              '''
    }
    sh '''#!/bin/bash
      echo ${BUILD_NUMBER}-$(crudini --get scripts/package_building/kernel_versions.ini KERNEL_BUILT folder) > ./build_name
    '''
    script {
      currentBuild.displayName = readFile "./build_name"
    }
    stash includes: 'scripts/package_building/kernel_versions.ini', name: 'kernel_version_ini'
    dir ("scripts/package_building") {
        stash includes: "${env.BUILD_NUMBER}-${env.BRANCH_NAME}-${env.KERNEL_ARTIFACTS_PATH}/**/deb/**", name: env.KERNEL_ARTIFACTS_PATH
    }
    sh '''
        set -xe
        rm -rf "scripts/package_building/${BUILD_NUMBER}-${BRANCH_NAME}-${KERNEL_ARTIFACTS_PATH}"
        '''
    archiveArtifacts 'scripts/package_building/kernel_versions.ini'
}


def runLisa(platform, secrets, testName, testCategory) {
    def customKernel = ""
    def osVHD = ""
    def region = params.LISAV2_AZURE_REGION
    def vmSize = ""

    prepareEnv(env.LISAV2_BRANCH, env.LISAV2_REMOTE)
    try {
        unstashKernel(env.KERNEL_ARTIFACTS_PATH)
        customKernel = "-CustomKernel 'localfile:./${env.BUILD_NUMBER}-${env.BRANCH_NAME}-${env.KERNEL_ARTIFACTS_PATH}/*/deb/*.deb'"
    } catch (Exception e) {
        echo "No stash ${env.KERNEL_ARTIFACTS_PATH} found"
    }

    if (testName.equals(env.LISAV2_AZURE_STRESS_TEST)) {
        vmSize = "-OverrideVMSize '${params.AZURE_BOOT_STRESS_VM_SIZE}'"
    }
    if (platform.equals('HyperV')) {
        region = "localhost"
        if (testName.equals(env.LISAV2_PERFORMANCE_TEST)) {
            region = "localhost," + env.HYPERV_SECOND_PERF_NODE
        }
        osVHD = "-OsVHD '" + getVhdLocation(env.LISAV2_IMAGES_SHARE_URL, env.LISAV2_HYPERV_UBUNTU_IMAGE_BIONIC) + "'"
    }

    RunPowershellCommand(".\\Run-LisaV2.ps1" +
        " -TestLocation '${region}'" +
        " -RGIdentifier '${env.LISAV2_RG_IDENTIFIER}'" +
        " -TestPlatform '${platform}'" +
        " ${vmSize}" +
        " -ARMImageName '${env.LISAV2_AZURE_UBUNTU_IMAGE_BIONIC}'" +
        " ${osVHD}" +
        " ${customKernel}" +
        " -TestNames '${testName}'" +
        " -TestCategory '${testCategory}'" +
        " -StorageAccount 'ExistingStorage_Standard'" +
        " -XMLSecretFile '${secrets}'"
    )
}


def publishArtifacts() {
    dir("${env.KERNEL_ARTIFACTS_PATH}${env.BUILD_NUMBER}${env.BRANCH_NAME}") {
        unstash "${env.KERNEL_ARTIFACTS_PATH}"
        withCredentials([string(credentialsId: 'MSFT_KERNEL_GIT_URL', variable: 'MSFT_KERNEL_GIT_URL'),
                         string(credentialsId: 'SMB_SHARE_URL', variable: 'SMB_SHARE_URL'),
                                usernamePassword(credentialsId: 'smb_share_user_pass',
                                passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME')
                        ]) {
            sh '''#!/bin/bash
                set -xe
                if [[ "$KERNEL_GIT_URL" == "azure_kernel" ]]; then
                    KERNEL_GIT_URL=${MSFT_KERNEL_GIT_URL}
                fi
                folder_prefix="${KERNEL_GIT_URL##*/}"
                folder_prefix="${folder_prefix%.*}"
                mkdir -p "scripts/package_building"
                mv "${BUILD_NUMBER}-${BRANCH_NAME}-${KERNEL_ARTIFACTS_PATH}" "scripts/package_building/"
                bash "${WORKSPACE}/scripts/utils/publish_artifacts_to_smb.sh" \\
                    --build_number "${BUILD_NUMBER}-${BRANCH_NAME}" \\
                    --smb_url "${SMB_SHARE_URL}/${folder_prefix}" --smb_username "${USERNAME}" \\
                    --smb_password "${PASSWORD}" --artifacts_path "${KERNEL_ARTIFACTS_PATH}" \\
                    --artifacts_folder_prefix "${folder_prefix}"
                '''
        }
    }
}

def publishTempArtifacts() {
    dir("${env.KERNEL_ARTIFACTS_PATH}${env.BUILD_NUMBER}${env.BRANCH_NAME}") {
        unstash "${env.KERNEL_ARTIFACTS_PATH}"
        withCredentials([string(credentialsId: 'MSFT_KERNEL_GIT_URL', variable: 'MSFT_KERNEL_GIT_URL'),
                         string(credentialsId: 'SMB_SHARE_URL', variable: 'SMB_SHARE_URL'),
                            usernamePassword(credentialsId: 'smb_share_user_pass',
                                        passwordVariable: 'PASSWORD',
                                        usernameVariable: 'USERNAME')]) {
            sh '''#!/bin/bash
                set -xe
                if [[ "$KERNEL_GIT_URL" == "azure_kernel" ]]; then
                    KERNEL_GIT_URL=${MSFT_KERNEL_GIT_URL}
                fi
                folder_prefix="${KERNEL_GIT_URL##*/}"
                folder_prefix="${folder_prefix%.*}"
                mkdir -p "scripts/package_building"
                mv "${BUILD_NUMBER}-${BRANCH_NAME}-${KERNEL_ARTIFACTS_PATH}" "scripts/package_building/"
                bash "${WORKSPACE}/scripts/utils/publish_artifacts_to_smb.sh" \\
                    --build_number "${BUILD_NUMBER}-${BRANCH_NAME}" \\
                    --smb_url "${SMB_SHARE_URL}/temp-kernel-artifacts" --smb_username "${USERNAME}" \\
                    --smb_password "${PASSWORD}" --artifacts_path "${KERNEL_ARTIFACTS_PATH}" \\
                    --artifacts_folder_prefix "${folder_prefix}"
                '''
        }
    }
}

def stashArtifacts() {
    sh '''#!/bin/bash
        set -xe -o pipefail
        kernel_dir="${BUILD_NUMBER}-${BRANCH_NAME}-${KERNEL_ARTIFACTS_PATH}"
        mkdir -p "${kernel_dir}"
        cp -r "/mnt/kernels/${KERNEL_ARTIFACTS_SMB_PATH}" "${kernel_dir}"
    '''
    stash excludes: "${env.BUILD_NUMBER}-${env.BRANCH_NAME}-${env.KERNEL_ARTIFACTS_PATH}/**/${env.PACKAGE_TYPE}/*dbg*", includes: "${env.BUILD_NUMBER}-${env.BRANCH_NAME}-${env.KERNEL_ARTIFACTS_PATH}/**/${env.PACKAGE_TYPE}/**", name: env.KERNEL_ARTIFACTS_PATH
    cleanWs()
}


// **************
// PIPELINE LOGIC
// **************

if (params.RUN_AZURE_BOOT_TEST) {
    runs['azure_boot'] = {
        node ("azure") {
            stage ("azure_boot") {
                try {
                    echo "Running Azure Boot test"
                    withCredentials(bindings: [
                      file(credentialsId: 'Azure_Secrets_File',
                           variable: 'Azure_Secrets_File')
                    ]) {
                        runLisa('Azure', env.Azure_Secrets_File, 'BVT-CORE-VERIFY-LIS-MODULES', '')
                    }
                } catch (Exception e) {
                    echo e.toString()
                    echo "Failed to run Azure Boot test"
                    currentBuild.result = 'FAILURE'
                } finally {
                    junit "Report\\*-junit.xml"
                    powershell "Move-Item -Force Report\\*-junit.xml Report\\AZURE_BOOT_TEST.xml"
                    archive "Report\\AZURE_BOOT_TEST.xml"
                    archiveArtifacts "TestResults\\**\\*"
                }
            }
        }
    }
}

if (params.RUN_AZURE_BOOT_STRESS_TEST) {
    runs['azure_boot_stress'] = {
        node ("azure") {
            stage ("azure_boot_stress") {
                try {
                    echo "Running Azure Boot Stress tests"
                    withCredentials(bindings: [
                      file(credentialsId: 'Azure_Secrets_File',
                           variable: 'Azure_Secrets_File')
                    ]) {
                        runLisa('Azure', env.Azure_Secrets_File, env.LISAV2_AZURE_STRESS_TEST, '')
                    }
                } catch (Exception e) {
                    echo e.toString()
                    echo "Failed to run Azure Boot Stress test"
                    currentBuild.result = 'FAILURE'
                } finally {
                    junit "Report\\*-junit.xml"
                    powershell "Move-Item -Force Report\\*-junit.xml Report\\AZURE_BOOT_STRESS_TEST.xml"
                    archive "Report\\AZURE_BOOT_STRESS_TEST.xml"
                    archiveArtifacts "TestResults\\**\\*"
                }
            }
        }
    }
}

if (params.RUN_AZURE_BVT_TESTS) {
    runs['azure_bvt'] = {
        node ("azure") {
            stage ("azure_bvt") {
                try {
                    echo "Running Azure BVT tests"
                    withCredentials(bindings: [
                      file(credentialsId: 'Azure_Secrets_File',
                           variable: 'Azure_Secrets_File')
                    ]) {
                        runLisa('Azure', env.Azure_Secrets_File, '', 'BVT')
                    }
                } catch (Exception e) {
                    echo e.toString()
                    echo "Failed to run Azure BVT tests"
                    currentBuild.result = 'FAILURE'
                } finally {
                    junit "Report\\*-junit.xml"
                    powershell "Move-Item -Force Report\\*-junit.xml Report\\AZURE_BVT_TESTS.xml"
                    archive "Report\\AZURE_BVT_TESTS.xml"
                    archiveArtifacts "TestResults\\**\\*"
                }
            }
        }
    }
}

if (params.RUN_HYPERV_BVT_TESTS) {
    runs['hyperv_bvt'] = {
        node ("hyper-v") {
            stage ("hyperv_bvt") {
                try {
                    echo "Running HyperV BVT tests"
                    withCredentials(bindings: [
                      file(credentialsId: 'Azure_Secrets_File',
                           variable: 'Azure_Secrets_File'),
                      string(credentialsId: 'LISAV2_IMAGES_SHARE_URL',
                             variable: 'LISAV2_IMAGES_SHARE_URL')
                    ]) {
                        runLisa('HyperV', env.Azure_Secrets_File, '', 'BVT')
                    }
                } catch (Exception e) {
                    echo e.toString()
                    echo "Failed to run HyperV BVT tests"
                    currentBuild.result = 'FAILURE'
                } finally {
                    junit "Report\\*-junit.xml"
                    powershell "Move-Item -Force Report\\*-junit.xml Report\\HYPERV_BVT_TESTS.xml"
                    archive "Report\\HYPERV_BVT_TESTS.xml"
                    archiveArtifacts "TestResults\\**\\*"
                }
            }
        }
    }
}

if (params.RUN_AZURE_PERF_TESTS) {
    runs['azure_perf'] = {
        node ("azure") {
            stage ("azure_perf") {
                try {
                    echo "Running Azure performance tests"
                    withCredentials(bindings: [
                      file(credentialsId: 'Azure_Secrets_File',
                           variable: 'Azure_Secrets_File'),
                      string(credentialsId: 'LISAV2_IMAGES_SHARE_URL',
                             variable: 'LISAV2_IMAGES_SHARE_URL')
                    ]) {
                        runLisa('Azure', env.Azure_Secrets_File, env.LISAV2_PERFORMANCE_TEST, '')
                    }
                } catch (Exception e) {
                    echo e.toString()
                    echo "Failed to run Azure performance tests"
                    currentBuild.result = 'FAILURE'
                } finally {
                    junit "Report\\*-junit.xml"
                    powershell 'ls -Recurse TestResults\\** | Where-Object {$_.Name -like "*_perf_results.json"} | ForEach-Object {Copy-Item $_ "Report\\AZURE_PERF_TESTSSUITE$($_.Name)"}'
                    powershell "Move-Item -Force Report\\*-junit.xml Report\\AZURE_PERF_TESTS.xml"
                    archive "Report\\AZURE_PERF_TESTS*"
                    archiveArtifacts "TestResults\\**\\*"
                }
            }
        }
    }
}

if (params.RUN_HYPERV_PERF_TESTS && params.HYPERV_SECOND_PERF_NODE && !params.HYPERV_SECOND_PERF_NODE.contains("localhost")) {
    runs['hyperv_perf'] = {
        node ("net_perf") {
            stage ("hyperv_perf") {
                try {
                    echo "Running HyperV performance tests"
                    withCredentials(bindings: [
                      file(credentialsId: 'Azure_Secrets_File',
                           variable: 'Azure_Secrets_File'),
                      string(credentialsId: 'LISAV2_IMAGES_SHARE_URL',
                             variable: 'LISAV2_IMAGES_SHARE_URL')
                    ]) {
                        runLisa('HyperV', env.Azure_Secrets_File, env.LISAV2_PERFORMANCE_TEST, '')
                    }
                } catch (Exception e) {
                    echo e.toString()
                    echo "Failed to run HyperV performance tests"
                    currentBuild.result = 'FAILURE'
                } finally {
                    junit "Report\\*-junit.xml"
                    powershell 'ls -Recurse TestResults\\** | Where-Object {$_.Name -like "*_perf_results.json"} | ForEach-Object {Copy-Item $_ "Report\\HYPERV_PERF_TESTSSUITE$($_.Name)"}'
                    powershell "Move-Item -Force Report\\*-junit.xml Report\\HYPERV_PERF_TESTS.xml"
                    archive "Report\\HYPERV_PERF_TESTS*"
                    archiveArtifacts "TestResults\\**\\*"
                }
            }
        }
    }
}


// *************
// PIPELINE MAIN
// *************

if (params.BUILD_KERNEL_ARTIFACTS) {
    node ("ubuntu_kernel_builder") {
        stage ("build_artifacts") {
            checkout scm
            buildKernel()
        }
    }
    node ("meta_slave") {
        stage ("publish_temp_artifacts") {
            checkout scm
            publishTempArtifacts()
        }
    }
} else {
    if (params.KERNEL_ARTIFACTS_SMB_PATH) {
        node ("meta_slave") {
            stage ("stash_artifacts") {
                stashArtifacts()
            }
        }
    }
}

stage("validation_stage") {
    parallel runs
}

if (params.BUILD_KERNEL_ARTIFACTS) {
    node ("meta_slave") {
        stage ("publish_artifacts") {
            checkout scm
            publishArtifacts()
        }
    }
}