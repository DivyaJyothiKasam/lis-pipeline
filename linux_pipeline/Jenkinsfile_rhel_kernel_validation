#!/usr/bin/env groovy

def PowerShellWrapper(psCmd) {
    psCmd = psCmd.replaceAll("\r", "").replaceAll("\n", "")
    bat "powershell.exe -NonInteractive -ExecutionPolicy Bypass -Command \"\$ErrorActionPreference='Stop';[Console]::OutputEncoding=[System.Text.Encoding]::UTF8;$psCmd;EXIT \$global:LastExitCode\""
}

withCredentials(bindings: [string(credentialsId: 'LIS_ARCHIVE_LINK',
                                  variable: 'LIS_ARCHIVE_LINK')]) {
    properties ([
        [$class: 'ParametersDefinitionProperty',
            parameterDefinitions: [
            [$class: 'StringParameterDefinition',
                name: 'LIS_LINK',
                defaultValue: "${LIS_ARCHIVE_LINK}",
                description: 'Link to the lis package to be tested']
            ]
        ]
    ])
}

stage ("Check for kernel") {
    node ("monitor-hyperv") {
        withCredentials(bindings: [string(credentialsId: 'UTILS_DIR', variable: 'UTILS_DIR'), 
                                   string(credentialsId: 'REMOTE_HTML_LOCATION',
                                          variable: 'REMOTE_HTML_LOCATION')]) {
            dir ("check_versions-" + env.BUILD_NUMBER + env.BRANCH_NAME) { 
                checkout scm
                echo 'Checking if there is a new kernel version'
                PowerShellWrapper('''
                    & ".\\scripts\\rhel_validation\\get_kernel_version.ps1"
                        -WorkDir '.\\temp'
                        -UtilsDir "${env:UTILS_DIR}"
                        -LatestVersionsFile "${env:UTILS_DIR}\\latest_tested_versions.txt"
                        -RemoteHtmlLocation "${env:REMOTE_HTML_LOCATION}"
                        -OutputFile "kernel_versions.txt"
                ''') // LatestVersionsFile changed
                stash includes: 'kernel_versions.txt', name: 'kernel_versions'
                echo 'Kernel versions checked'
            }
        } 
    }
}

stage ("Test kernel") {
    node ("jenkins-meta-slave") {
        def runNumber = 1
        def runs = [:]
        dir ("rhel_versions-" + env.BUILD_NUMBER + env.BRANCH_NAME) {
            unstash 'kernel_versions'
        }
        versionsPath = "./rhel_versions-${env.BUILD_NUMBER}${env.BRANCH_NAME}/kernel_versions.txt"
        kernelVersions = readFile(versionsPath)
        if (!kernelVersions) {
            echo "No new kernel versions were found"
            currentBuild.result = 'SUCCESS'
            return
        }
        kernelVersions = kernelVersions.replaceAll("[^A-Za-z0-9.=_;\\-]", "").split(";")
        kernelVersions.each() {
            def distro = it.split("=")[0]
            def version = it.split("=")[1]
            runs["${distro}-${version}"] = {
                stage ("${distro}-${version}") {
                withCredentials(bindings: [usernamePassword(credentialsId: 'RHEL_ACCOUNT',
                                                            passwordVariable: 'PASSWORD',
                                                            usernameVariable: 'USERNAME')]) {
                    dir ("r-${distro}-${version}-${env.BUILD_NUMBER}-${env.BRANCH_NAME}") {
                        def vmNumber = runNumber
                        runNumber = runNumber + 1
                        checkout scm
                        echo "Testing kernel: ${version} on distro: ${distro}"
                        def exitCode = sh (returnStatus: true, script: """
                            bash scripts/rhel_validation/validate_rhel_vm.sh \
                                --workdir "r-${distro}-${version}-${env.BUILD_NUMBER}-${env.BRANCH_NAME}" \
                                --build_name "rpm-lis" --build_number "${BUILD_NUMBER}${BRANCH_NAME}${vmNumber}" \
                                --os_type "${distro}" --kernel_version "${version}" \
                                --lis_link "${LIS_LINK}" \
                                --log_destination "${distro}" \
                                --rhel_username '${USERNAME}' \
                                --rhel_password '${PASSWORD}'
                        """)
                        archiveArtifacts artifacts: "${distro}/lis_install.log"
                        archiveArtifacts artifacts: "${distro}/lis_check.log"
                        if (exitCode == 0) {
                            sh (returnStatus: true, script: """
                                bash scripts/azure_kernel_validation/remove_azure_vm_resources.sh \
                                    "rpm-lis${BUILD_NUMBER}${BRANCH_NAME}${vmNumber}"
                            """)
                        } else {
                            currentBuild.result = 'FAILURE'
                        }
                        deleteDir()
                    }
                }
                }
            }
        }
        parallel runs
    }
}
