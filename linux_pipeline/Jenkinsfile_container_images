#!/usr/bin/env groovy

def PowerShellWrapper(psCmd) {
    psCmd = psCmd.replaceAll("\r", "").replaceAll("\n", "")
    bat "powershell.exe -NonInteractive -ExecutionPolicy Bypass -Command \"\$ErrorActionPreference='Stop';[Console]::OutputEncoding=[System.Text.Encoding]::UTF8;$psCmd;EXIT \$global:LastExitCode\""
}

properties ([
    [$class: 'ParametersDefinitionProperty',
        parameterDefinitions: [
        [$class: 'StringParameterDefinition',
            name: 'KERNEL_URL',
            defaultValue: "",
            description: 'Url to the kernel to be tested'],
        [$class: 'StringParameterDefinition',
            name: 'INITRD_URL',
            defaultValue: "",
            description: 'Url to the initrd to be tested'],
        [$class: 'StringParameterDefinition',
            name: 'TESTS',
            defaultValue: "linuxkit,opengcs_build,docker_stress,kernel_builder",
            description: 'Tests to be run'],
        [$class: 'StringParameterDefinition',
            name: 'HOST_VERSION',
            defaultValue: "RS4",
            description: 'Windows host versions.']
        ]
    ]
])

env.ARTIFATCS_DESTINATION = "C:\\Program Files\\Linux Containers"
env.BINARIES_DESTINATION = "C:\\lcow-bin"
env.LINUXKIT_REPO = "https://github.com/linuxkit/lcow"
env.LINUXKIT_BRANCH = "master"
env.OPENGCS_REPO = "https://github.com/Microsoft/opengcs.git"
env.OPENGCS_BRANCH = "master"
env.DOCKER_STRESS_REPO = "https://github.com/progrium/docker-stress.git"
env.DOCKER_STRESS_BRANCH = "master"
env.DOCKER_KERNEL_BUILDER_REPO = "https://github.com/moul/docker-kernel-builder.git"
env.DOCKER_KERNEL_BUILDER_BRANCH = "master"

versionsMap = ["RS4":"lcow-win-rs4"]
testMap = ["test_functional":"linuxkit","test_stress":"docker_stress,opengcs_build,kernel_builder"]
def hostName = versionsMap[env.HOST_VERSION]

def runTests(versionsMap, hostName){
    def testNames = env.TESTS.split(",")

    testMap.keySet().each {
        def section = it
        def sectionTests = testMap[section].split(",")

        stage (section) {
            def runs = [:]
            sectionTests.each {
                if (testNames.contains(it)) {
                    runs[it] = {
                        node (hostName) {
                            runTestStage(it)
                        }
                    }
                }
            }
            parallel runs
        }
    }
}

def runTestStage(testName) {
    switch (testName) {
        case "linuxkit":
            runLinuxKitTesting()
            break
        case "opengcs_build":
            buildOpenGCS()
            break
        case "docker_stress":
            runStressTest()
            break
		case "kernel_builder":
            runKernelBuildTest()
            break
        default:
            println ("Test: ${testName} not defined. Skipping.")
    }
}

def runLinuxKitTesting() {
    dir ("lcow-linuxkit-${env.BUILD_NUMBER}-${env.BRANCH_NAME}") {
        checkout scm
        echo 'Starting linuxkit testing'
        PowerShellWrapper('''
            & ".\\scripts\\lcow\\Run-LinuxKit.ps1"
                -BinariesPath "${env:BINARIES_DESTINATION}"
                -TestRepo "${env:LINUXKIT_REPO}"
                -TestBranch "${env:LINUXKIT_BRANCH}"
                -WorkDir "C:\\lcow-testing\\workdir-linuxkit-${env:BUILD_NUMBER}-${env:BRANCH_NAME}"
                -LogDestination ".\\linuxkit-logs"
            ''')
        archiveArtifacts artifacts: "linuxkit-logs\\*", allowEmptyArchive: true
        deleteDir()
    }
}

def buildOpenGCS() {
    dir ("lcow-opengcs-build-${env.BUILD_NUMBER}-${env.BRANCH_NAME}") {
        checkout scm
        echo 'Building OpenGCS'
        PowerShellWrapper('''
            & ".\\scripts\\lcow\\Build-OpenGCS.ps1"
                -BinariesPath "${env:BINARIES_DESTINATION}"
                -TestRepo "${env:OPENGCS_REPO}"
                -TestBranch "${env:OPENGCS_BRANCH}"
                -WorkDir "C:\\lcow-testing\\workdir-gcs-${env:BUILD_NUMBER}-${env:BRANCH_NAME}"
                -LogDestination ".\\opengcs-logs"
            ''')
        archiveArtifacts artifacts: "opengcs-logs\\*", allowEmptyArchive: true
        deleteDir()
    }
}

def runStressTest() {
    dir ("lcow-docker-stress-${env.BUILD_NUMBER}-${env.BRANCH_NAME}") {
        checkout scm
        echo 'Starting stress testing'
        PowerShellWrapper('''
            & ".\\scripts\\lcow\\Run-StressTest.ps1"
                -BinariesPath "${env:BINARIES_DESTINATION}"
                -TestRepo "${env:DOCKER_STRESS_REPO}"
                -TestBranch "${env:DOCKER_STRESS_BRANCH}"
                -WorkDir "C:\\lcow-testing\\workdir-stress-${env:BUILD_NUMBER}-${env:BRANCH_NAME}"
                -LogDestination ".\\stress-logs"
            ''')
        archiveArtifacts artifacts: "stress-logs\\*", allowEmptyArchive: true
        deleteDir()
    }
}

 def runKernelBuildTest() {
         dir ("lcow-kernel-build-${env.BUILD_NUMBER}-${env.BRANCH_NAME}") {
             checkout scm
             echo 'Starting kernel builder test'
             PowerShellWrapper('''
                 & ".\\scripts\\lcow\\Run-KernelBuild.ps1"
                     -BinariesPath "${env:BINARIES_DESTINATION}"
                     -TestRepo "${env:DOCKER_KERNEL_BUILDER_REPO}"
                     -TestBranch "${env:DOCKER_KERNEL_BUILDER_BRANCH}"
                     -WorkDir "C:\\lcow-testing\\workdir-Kbuild-${env:BUILD_NUMBER}-${env:BRANCH_NAME}"
                     -LogDestination ".\\Kbuild-logs"
                 ''')
             archiveArtifacts artifacts: "Kbuild-logs\\*", allowEmptyArchive: true
             deleteDir()
         }
     }


stage ("check_kernel") {
    node ("ws2016") {
        withCredentials(bindings: [string(credentialsId: 'TEST_ARTIFACTS_PATH', variable: 'TEST_ARTIFACTS_PATH')]) {
            dir ("lcow-artifacts-${env.BUILD_NUMBER}-${env.BRANCH_NAME}") {
                checkout scm
                PowerShellWrapper('''
                    & ".\\scripts\\lcow\\Copy-Artifacts.ps1"
                        -KernelUrl "${env:KERNEL_URL}"
                        -InitrdUrl "${env:INITRD_URL}"
                        -Destination ".\\lcow-artifacts"
                ''')
                stash includes: 'lcow-artifacts\\*', name: 'lcow_artifacts'
                deleteDir()
            }
        }
    }
}

stage ("prepare_env") {
    node (hostName) {
        dir ("lcow-prepare-${env.BUILD_NUMBER}-${env.BRANCH_NAME}") {
            checkout scm
            echo "Preparing the host:${hostName} for testing"
            unstash 'lcow_artifacts'
            PowerShellWrapper('''
                & ".\\scripts\\lcow\\Prepare-Env.ps1"
                    -BinariesDestination "${env:BINARIES_DESTINATION}"
                    -ArtifactsPath ".\\lcow-artifacts"
                    -ArtifactsDestination "${env:ARTIFATCS_DESTINATION}"
                ''')
            deleteDir()
        }
    }
}

runTests(versionsMap, hostName)

stage ("clear_env") {
    node (hostName) {
        dir ("lcow-prepare-${env.BUILD_NUMBER}-${env.BRANCH_NAME}") {
            checkout scm
            echo "Cleaning host:${hostName} after testing"
            PowerShellWrapper('''
                & ".\\scripts\\lcow\\Clear-Env.ps1"
                    -BinariesPath "${env:BINARIES_DESTINATION}"
                    -ArtifactsPath "${env:ARTIFATCS_DESTINATION}"
                    -DockerdPath "C:\\Docker-Workspace"
                ''')
            deleteDir()
        }
    }
}
