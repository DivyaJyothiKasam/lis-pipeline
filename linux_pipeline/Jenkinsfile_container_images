#!/usr/bin/env groovy

def PowerShellWrapper(psCmd) {
    psCmd = psCmd.replaceAll("\r", "").replaceAll("\n", "")
    bat "powershell.exe -NonInteractive -ExecutionPolicy Bypass -Command \"[Console]::OutputEncoding=[System.Text.Encoding]::UTF8;$psCmd;EXIT \$global:LastExitCode\""
}

properties ([
    disableConcurrentBuilds(),
    pipelineTriggers([cron('H H/12 * * *')]),
    [$class: 'ParametersDefinitionProperty',
        parameterDefinitions: [
        [$class: 'StringParameterDefinition',
            name: 'KERNEL_URL',
            defaultValue: "",
            description: 'Url to the kernel to be tested'],
        [$class: 'StringParameterDefinition',
            name: 'INITRD_URL',
            defaultValue: "",
            description: 'Url to the initrd to be tested'],
        [$class: 'BooleanParameterDefinition', 
            defaultValue: true, 
            description: 'Run binaries version test', 
            name: 'binaries_check'],
        [$class: 'BooleanParameterDefinition', 
            defaultValue: true, 
            description: 'Run full linuxkit test suite', 
            name: 'linuxkit'],
		[$class: 'BooleanParameterDefinition',
            defaultValue: true,
            description: 'Run full hyper-v docker test',
            name: 'docker_test'],
        [$class: 'BooleanParameterDefinition', 
            defaultValue: true,
            description: 'Run docker-stress test', 
            name: 'docker_stress'],
        [$class: 'BooleanParameterDefinition', 
            defaultValue: true,
            description: 'Build latest opengcs from github', 
            name: 'opengcs_build'],
        [$class: 'BooleanParameterDefinition', 
            defaultValue: true,
            description: 'Build kernel in docker container', 
            name: 'kernel_builder'],
        [$class: 'BooleanParameterDefinition',
            defaultValue: true,
            description: 'Test kernel in Hyper-V',
            name: 'kernel_hyperv_test'],
        [$class: 'ChoiceParameterDefinition',
            choices: "RS5\nRS4",
            name: 'HOST_VERSION',
            description: 'Windows host versions.']
        ]
    ]
])

env.LAST_VERSION_FILE = "C:\\LCOW_LATEST_VERSION.txt"
env.ARTIFATCS_DESTINATION = "C:\\Program Files\\Linux Containers"
env.BINARIES_DESTINATION = "C:\\lcow-bin"
env.LINUXKIT_REPO = "https://github.com/linuxkit/lcow"
env.LINUXKIT_BRANCH = "master"
env.OPENGCS_REPO = "https://github.com/Microsoft/opengcs.git"
env.OPENGCS_BRANCH = "master"
env.DOCKER_STRESS_REPO = "https://github.com/progrium/docker-stress.git"
env.DOCKER_STRESS_BRANCH = "master"
env.DOCKER_KERNEL_BUILDER_REPO = "https://github.com/moul/docker-kernel-builder.git"
env.DOCKER_KERNEL_BUILDER_BRANCH = "master"
env.DOCKER_HYPERV_TEST_REPO = "https://linuxpipelineshare.blob.core.windows.net/lcow/hypervlcowtest.zip"
HYPERV_TEST_JOB = "lcow-hyperv-testing"

versionsMap = ["RS4":"lcow-win-rs4","RS5":"lcow_windows_rs5"]
testMap = ["binaries_check":"binaries_check","test_functional":"linuxkit,docker_test,kernel_hyperv_test","test_stress":"docker_stress,opengcs_build,kernel_builder"]
def hostName = versionsMap[env.HOST_VERSION]
skipBuild = false

def runTests(versionsMap, hostName){
    testMap.keySet().each {
        def section = it
        def sectionTests = testMap[section].split(",")

        stage (section) {
            def runs = [:]
            sectionTests.each {
                if (env[it] == "true") {
                    runs[it] = {
                        node (hostName) {
                            runTestStage(it)
                        }
                    }
                }
            }

            try {
                parallel runs
            } catch (exc) {
                currentBuild.result = 'SUCCESS'
            }
        }
    }
}

def runTestStage(testName) {
    switch (testName) {
        case "linuxkit":
            runLinuxKitTesting()
            break
        case "opengcs_build":
            buildOpenGCS()
            break
        case "docker_stress":
            runStressTest()
            break
		case "kernel_builder":
            runKernelBuildTest()
            break
        case "binaries_check":
            runBinariesCheck()
            break
		case "docker_test":
            runDockerTest()
            break
        case "kernel_hyperv_test":
            runHypervTest()
            break
        default:
            println ("Test: ${testName} not defined. Skipping.")
    }
}

def runHypervTest() {
    dir ("lcow-bin-test-${env.BUILD_NUMBER}-${env.BRANCH_NAME}") {
        echo 'Starting Hyper-V test job'
        fileName = "rpm-" + buildName.split("-")[1] + ".tgz"
        testRun = build job: HYPERV_TEST_JOB, parameters: [
            string(name: 'ARCHIVE_NAME', value: "${fileName}"),
            string(name: 'TEST_XML', value: "lcow_fvt.xml")], wait: false;
        deleteDir()
    }
}

def runBinariesCheck () {
    dir ("lcow-bin-test-${env.BUILD_NUMBER}-${env.BRANCH_NAME}") {
        checkout scm
        echo 'Starting binaries checking'
        PowerShellWrapper('''
            & ".\\scripts\\lcow\\Run-BinariesCheck.ps1"
                -XmlConfig ".\\scripts\\lcow\\BIN_CONFIG.xml"
                -BinariesPath "${env:BINARIES_DESTINATION}"
                -WorkDir "C:\\lcow-testing\\workdir-bin-check-${env:BUILD_NUMBER}-${env:BRANCH_NAME}"
                -LogDestination ".\\bin-check-logs"
            ''')
        archiveArtifacts artifacts: "bin-check-logs\\*", allowEmptyArchive: true
        deleteDir()
    }
}

def runDockerTest() {
     dir ("lcow-docker-test-${env.BUILD_NUMBER}-${env.BRANCH_NAME}") {
         checkout scm
         echo 'Starting hyperv docker test'
         PowerShellWrapper('''
             & ".\\scripts\\lcow\\Run-hypervtest.ps1"
                 -BinariesPath "${env:BINARIES_DESTINATION}"
				 -TestRepo "${env:DOCKER_HYPERV_TEST_REPO}"
                 -WorkDir "C:\\lcow-testing\\workdir-hypervtest-${env:BUILD_NUMBER}-${env:BRANCH_NAME}"
                 -LogDestination ".\\hypervtest-logs"
             ''')
         archiveArtifacts artifacts: "hypervtest-logs\\*", allowEmptyArchive: true
         deleteDir()
     }
 }


def runLinuxKitTesting() {
    dir ("lcow-linuxkit-${env.BUILD_NUMBER}-${env.BRANCH_NAME}") {
        checkout scm
        echo 'Starting linuxkit testing'
        PowerShellWrapper('''
            & ".\\scripts\\lcow\\Run-LinuxKit.ps1"
                -BinariesPath "${env:BINARIES_DESTINATION}"
                -TestRepo "${env:LINUXKIT_REPO}"
                -TestBranch "${env:LINUXKIT_BRANCH}"
                -WorkDir "C:\\lcow-testing\\workdir-linuxkit-${env:BUILD_NUMBER}-${env:BRANCH_NAME}"
                -LogDestination ".\\linuxkit-logs"
            ''')
        archiveArtifacts artifacts: "linuxkit-logs\\*", allowEmptyArchive: true
        deleteDir()
    }
}

def buildOpenGCS() {
    dir ("lcow-opengcs-build-${env.BUILD_NUMBER}-${env.BRANCH_NAME}") {
        checkout scm
        echo 'Building OpenGCS'
        PowerShellWrapper('''
            & ".\\scripts\\lcow\\Build-OpenGCS.ps1"
                -BinariesPath "${env:BINARIES_DESTINATION}"
                -TestRepo "${env:OPENGCS_REPO}"
                -TestBranch "${env:OPENGCS_BRANCH}"
                -WorkDir "C:\\lcow-testing\\workdir-gcs-${env:BUILD_NUMBER}-${env:BRANCH_NAME}"
                -LogDestination ".\\opengcs-logs"
            ''')
        archiveArtifacts artifacts: "opengcs-logs\\*", allowEmptyArchive: true
        deleteDir()
    }
}

def runStressTest() {
    dir ("lcow-docker-stress-${env.BUILD_NUMBER}-${env.BRANCH_NAME}") {
        checkout scm
        echo 'Starting stress testing'
        PowerShellWrapper('''
            & ".\\scripts\\lcow\\Run-StressTest.ps1"
                -BinariesPath "${env:BINARIES_DESTINATION}"
                -TestRepo "${env:DOCKER_STRESS_REPO}"
                -TestBranch "${env:DOCKER_STRESS_BRANCH}"
                -WorkDir "C:\\lcow-testing\\workdir-stress-${env:BUILD_NUMBER}-${env:BRANCH_NAME}"
                -LogDestination ".\\stress-logs"
            ''')
        archiveArtifacts artifacts: "stress-logs\\*", allowEmptyArchive: true
        deleteDir()
    }
}

def runKernelBuildTest() {
         dir ("lcow-kernel-build-${env.BUILD_NUMBER}-${env.BRANCH_NAME}") {
             checkout scm
             echo 'Starting kernel builder test'
             PowerShellWrapper('''
                 & ".\\scripts\\lcow\\Run-KernelBuild.ps1"
                     -BinariesPath "${env:BINARIES_DESTINATION}"
                     -TestRepo "${env:DOCKER_KERNEL_BUILDER_REPO}"
                     -TestBranch "${env:DOCKER_KERNEL_BUILDER_BRANCH}"
                     -WorkDir "C:\\lcow-testing\\workdir-Kbuild-${env:BUILD_NUMBER}-${env:BRANCH_NAME}"
                     -LogDestination ".\\Kbuild-logs"
                 ''')
             archiveArtifacts artifacts: "Kbuild-logs\\*", allowEmptyArchive: true
             deleteDir()
         }
     }


stage ("check_kernel") {
    node (hostName) {
        withCredentials(bindings: [string(credentialsId: 'LCOW_STORAGE_ACCOUNT', variable: 'STORAGE_ACCOUNT'),
                                   string(credentialsId: 'LCOW_STORAGE_KEY', variable: 'STORAGE_KEY'),
                                   string(credentialsId: 'LCOW_CONTAINER_NAME', variable: 'CONTAINER_NAME')]) {
            dir ("lcow-artifacts-${env.BUILD_NUMBER}-${env.BRANCH_NAME}") {
                checkout scm
                PowerShellWrapper('''
                    & ".\\scripts\\lcow\\Get-Artifacts.ps1"
                        -StorageAccName "${env:STORAGE_ACCOUNT}"
                        -StorageAccKey "${env:STORAGE_KEY}"
                        -ContainerName "${env:CONTAINER_NAME}"
                        -LastVersionFile "${env:LAST_VERSION_FILE}"
                        -KernelUrl "${env:KERNEL_URL}"
                        -InitrdUrl "${env:INITRD_URL}"
                        -Destination ".\\lcow-artifacts"
                ''')

                buildName = readFile "./build_name"
                if (buildName != "" ) {
                    currentBuild.displayName = buildName + "-${env.BUILD_NUMBER}"
                    stash includes: 'lcow-artifacts\\*', name: 'lcow_artifacts'
                } else {
                    echo "No new artifacts found"
                    skipBuild = true
                }
                deleteDir()
            }
        }
    }
}

if (!skipBuild) {
    stage ("prepare_env") {
        node (hostName) {
            dir ("lcow-prepare-${env.BUILD_NUMBER}-${env.BRANCH_NAME}") {
                checkout scm
                echo "Preparing the host:${hostName} for testing"
                unstash 'lcow_artifacts'
                PowerShellWrapper('''
                    & ".\\scripts\\lcow\\Prepare-Env.ps1"
                        -BinariesDestination "${env:BINARIES_DESTINATION}"
                        -ArtifactsPath ".\\lcow-artifacts"
                        -ArtifactsDestination "${env:ARTIFATCS_DESTINATION}"
                        -WorkDir "C:\\lcow-testing"
                    ''')
                deleteDir()
            }
        }
    }

    runTests(versionsMap, hostName)

    stage ("clear_env") {
        node (hostName) {
            dir ("lcow-prepare-${env.BUILD_NUMBER}-${env.BRANCH_NAME}") {
                checkout scm
                echo "Cleaning host:${hostName} after testing"
                PowerShellWrapper('''
                    & ".\\scripts\\lcow\\Clear-Env.ps1"
                        -BinariesPath "${env:BINARIES_DESTINATION}"
                        -ArtifactsPath "${env:ARTIFATCS_DESTINATION}"
                        -DockerdPath "C:\\Docker-Workspace"
                        -WorkDir "C:\\lcow-testing"
                    ''')
                deleteDir()
            }
        }
    }
}
