#!/usr/bin/env groovy

def RunPowershellCommand(psCmd) {
    bat "powershell.exe -NonInteractive -ExecutionPolicy Bypass -Command \"[Console]::OutputEncoding=[System.Text.Encoding]::UTF8;$psCmd;EXIT \$global:LastExitCode\""
}

properties ([
    parameters([
        choice (name: 'Distro', choices: 'trusty\nxenial\nbionic\ncosmic',
                description: 'trusty - 14.04 validation <br> xenial - 16.04 validation <br> bionic - 18.04 validation <br> cosmic - 18.10 validation'),
        choice (name: 'Kernel', choices: 'linux-azure\nlinux-azure-edge',
                description: 'linux-azure - latest proposed linux-azure kernel validation <br> linux-azure-edge - latest proposed linux-azure-edge kernel validation'),
        choice (name: 'Platform', choices: 'azure\nhyperv\nall',
                description: 'azure - only Azure validation <br> all - all platforms validation <br> hyperv - only Hyper-V validation'),
        choice (name: 'Performance', choices: 'yes\nno',
                description: 'yes - will do Azure Performance testing <br> no - Azure Performance testing will be skipped'),
        choice (name: 'sendMail', choices: 'no\nyes',
                description: 'no - will not send mail <br> yes - will send mail')
    ])
])

def ARM_DISTRO_HASH = [trusty:'Canonical UbuntuServer 14.04.5-LTS latest',
                  xenial:'Canonical UbuntuServer 16.04-LTS latest',
                  bionic:'Canonical UbuntuServer 18.04-LTS latest',
                  cosmic:'Canonical UbuntuServer 18.10 latest']
def HYPERV_VHD_HASH = [trusty:'Ubuntu_14.04.5\\Ubuntu14.04.5-server.vhdx',
                  xenial:'ubuntu_16.04.5\\ubuntu_16.04.5.vhdx',
                  bionic:'ubuntu_18.04.1\\ubuntu_18.04.1_gen1_gen2.vhdx',
                  cosmic:'ubuntu_18.10\\ubuntu_18.10_gen1_gen2.vhdx']
def HYPERV_VALIDATION_TESTS_HASH = [HV_P0_VALIDATION:"-TestPriority 0 -ExcludeTests 'LIVE-MIGRATE-QUICK-MIGRATE,NVME-DISK-VALIDATION,SRIOV-VERIFY-LSPCI,SRIOV-VERIFY-SINGLE-VF-CONNECTION,LIVE-MIGRATE,NVME-FSTRIM,NVME-BLKDISCARD'",
    HV_P1_VALIDATION:"-TestPriority 1 -ExcludeTests 'LIVE-MIGRATE-FAILOVER,DYNAMIC-MEMORY-HIGH-PRIORITY,SRIOV-DISABLE-ENABLE-PCI,SRIOV-VERIFY-SINGLE-VF-CONNECTION-ONE-VCPU,SRIOV-VERIFY-SINGLE-VF-CONNECTION-MAX-VCPU,SRIOV-VERIFY-MAX-VF-CONNECTION,SRIOV-VERIFY-MAX-VF-CONNECTION-MAX-VCPU,SRIOV-ADD-MAX-NICS-DURING-PROVISION,SRIOV-INTERRUPTS-CHANGE,SRIOV-DISABLEVF-ON-GUEST,SRIOV-RELOAD-MODULE,SRIOV-DISABLEVF-PING,SRIOV-DISABLEVF-IPERF,SRIOV-DETACH-NIC,SRIOV-DISABLEVF-ONHOST,SRIOV-DISABLE-NIC,SRIOV-DISABLE-VMQ,SRIOV-CHANGE-RSS,SRIOV-MEASURE-VF-FAILBACK,SRIOV-MULTICAST,SRIOV-BROADCAST,SRIOV-REBOOT-VM,SRIOV-STRESS-SAVE,SRIOV-STRESS-PAUSE,PERF-NETWORK-TCP-LATENCY-SRIOV,PERF-NETWORK-TCP-SINGLE-CONNECTION-THROUGHPUT-SRIOV,PERF-NVME-4K-IO,PERF-NETWORK-TCP-SINGLE-CONNECTION-THROUGHPUT-SYNTHETIC,NVME-DISK-OPERATIONS,NVME-CHECK-EXPECTED-FAILURES,NVME-PCI-RESCIND,PERF-NETWORK-TCP-LATENCY-Synthetic'",
    HV_SRIOV_VALIDATION:"-TestCategory 'Functional' -TestArea 'SRIOV' -ExcludeTests 'SRIOV-MOVE-VHD'"]
def AZURE_VALIDATION_TESTS_HASH = [AZURE_P0_VALIDATION:"-TestPriority 0 -ExcludeTests 'NVME-DISK-VALIDATION,NVME-FSTRIM,NVME-BLKDISCARD,VERIFY-DPDK-COMPLIANCE'",
    AZURE_P1_VALIDATION:"-TestPriority 1 -ExcludeTests 'PERF-NETWORK-TCP-THROUGHPUT-MULTICLIENTS-NTTTCP-Synthetic,PERF-NETWORK-TCP-THROUGHPUT-MULTICLIENTS-NTTTCP-SRIOV,PERF-NETWORK-TCP-LATENCY-Synthetic,PERF-NETWORK-TCP-LATENCY-SRIOV,PERF-STORAGE-4K-IO,PERF-STORAGE-1024K-IO,PERF-NETWORK-TCP-SINGLE-CONNECTION-THROUGHPUT-SYNTHETIC,PERF-NETWORK-TCP-SINGLE-CONNECTION-THROUGHPUT-SRIOV,PERF-SYSCALL-BENCHMARK,PERF-NVME-4K-IO,NVME-MAX-DISK-VALIDATION,NVME-DISK-OPERATIONS,NVME-CHECK-EXPECTED-FAILURES,NVME-FILE-SYSTEM-VERIFICATION-GENERIC,NVME-PCI-RESCIND'",
    AZURE_P2_VALIDATION:"-TestPriority 2 -ExcludeTests 'PERF-NETWORK-TCP-THROUGHPUT-MULTICONNECTION-NTTTCP-Synthetic,PERF-NETWORK-TCP-THROUGHPUT-MULTICONNECTION-NTTTCP-SRIOV,PERF-NETWORK-UDP-1K-THROUGHPUT-MULTICONNECTION-NTTTCP-Synthetic,PERF-NETWORK-UDP-1K-THROUGHPUT-MULTICONNECTION-NTTTCP-SRIOV,PERF-NETWORK-UDP-1K-THROUGHPUT-MULTICLIENTS-NTTTCP-Synthetic,PERF-NETWORK-UDP-1K-THROUGHPUT-MULTICLIENTS-NTTTCP-SRIOV,PERF-NETWORK-UDP-THROUGHPUT-MULTICONNECTION-Synthetic,PERF-NETWORK-UDP-THROUGHPUT-MULTICONNECTION-SRIOV,PERF-STORAGE-OVER-NFS-Synthetic-TCP-4K,PERF-STORAGE-OVER-NFS-Synthetic-UDP-4K,PERF-STORAGE-OVER-NFS-SRIOV-TCP-4K,PERF-STORAGE-OVER-NFS-SRIOV-UDP-4K,PERF-NETWORK-TCP-NETPERF-SINGLE-PPS-Synthetic,PERF-NETWORK-TCP-NETPERF-SINGLE-PPS-SRIOV,PERF-NETWORK-TCP-NETPERF-MAX-PPS-Synthetic,PERF-NETWORK-TCP-NETPERF-MAX-PPS-SRIOV,PERF-GOLANG-BENCHMARK,NVME-FILE-SYSTEM-VERIFICATION-XFS,NVME-FILE-SYSTEM-VERIFICATION-EXT4,NVME-FILE-SYSTEM-VERIFICATION-BTRFS,AZURE-WINDOWS-NESTED-HYPERV-STORAGE-MULTIDISK,AZURE-NESTED-HYPERV-NTTTCP-DIFFERENT-L1-NAT,AZURE-WINDOWS-NESTED-HYPERV-STORAGE-SINGLE-DISK,VERIFY-DPDK-NFF-GO,PERF-DPDK-SINGLE-CORE-PPS-DS4,VERIFY-DPDK-OVS,PERF-DPDK-SINGLE-CORE-PPS-DS15,PERF-DPDK-FWD-PPS-DS15,PERF-DPDK-MULTICORE-PPS-F32'",
    AZURE_NVME_VALIDATION:"-TestCategory 'Functional' -TestArea 'NVME'"]
def AZURE_PERFORMANCE_TESTS_HASH = [PERF_NTTTCP:"-TestNames 'PERF-NETWORK-TCP-THROUGHPUT-MULTICONNECTION-NTTTCP-Synthetic,PERF-NETWORK-TCP-THROUGHPUT-MULTICONNECTION-NTTTCP-SRIOV' -ResultDBTable 'Perf_Network_TCP_Azure_DefaultKernel'",
    PERF_UDP:"-TestNames 'PERF-NETWORK-UDP-1K-THROUGHPUT-MULTICONNECTION-NTTTCP-Synthetic,PERF-NETWORK-UDP-1K-THROUGHPUT-MULTICONNECTION-NTTTCP-SRIOV' -ResultDBTable 'Perf_Network_UDP_Azure_DefaultKernel'",
    PERF_SINGLE_IPERF:"-TestNames 'PERF-NETWORK-TCP-SINGLE-CONNECTION-THROUGHPUT-SYNTHETIC,PERF-NETWORK-TCP-SINGLE-CONNECTION-THROUGHPUT-SRIOV' -ResultDBTable 'Perf_Network_Single_TCP_Azure_DefaultKernel'",
    PERF_LATENCY:"-TestNames 'PERF-NETWORK-TCP-LATENCY-Synthetic,PERF-NETWORK-TCP-LATENCY-SRIOV' -ResultDBTable 'Perf_Network_Latency_Azure_DefaultKernel'",
    PERF_STORAGE_4K:"-TestNames 'PERF-STORAGE-4K-IO' -StorageAccount 'ExistingStorage_Premium' -ResultDBTable 'Perf_Storage_Azure_DefaultKernel'"]
LATEST_VERSION_LOCATION="/home/lisa/latest_versions.sh"
PLATFORM_HYPERV = "hyperv"
PLATFORM_AZURE = "azure"
PLATFORM_ALL = "all"
LABEL_SRIOV = "sriov_mlnx"
LABEL_WS2016 = "ubuntu_azure_kernel_validation"
LISAV2_REMOTE = "https://github.com/lis/LISAv2.git"
LISAV2_BRANCH = "master"
AZURE_LOCATION_DEFAULT = "westus2"
AZURE_LOCATION_NVME = "eastus2"
AZURE_ID = "ubuntuAz"

def ARM_DISTRO = ARM_DISTRO_HASH.find{it.key == env.distro}.value
def HYPERV_VHD = HYPERV_VHD_HASH.find{it.key == env.distro}.value

if (env.kernel == "linux-azure") {
    KERNEL_TYPE = "proposed-azure"
}
if (env.kernel == "linux-azure-edge"){
    KERNEL_TYPE = "proposed-edge"
}

if ((env.platform == PLATFORM_ALL) || (env.platform == PLATFORM_AZURE)) {
    stage ("Azure-Validation-${env.distro}-${env.kernel}") {
        def runs = [:]
        AZURE_VALIDATION_TESTS_HASH.each() {
            def test_type = it.key
            def test_cmd = it.value
            runs["${test_type}"] = {
                stage ("${test_type}") {
                    def AZURE_LOCATION = ""
                    if (test_cmd.contains("-TestArea 'NVME'")){
                        AZURE_LOCATION = AZURE_LOCATION_NVME
                    } else {
                        AZURE_LOCATION = AZURE_LOCATION_DEFAULT
                    }
                    node ("azure"){
                        try {
                            timeout (32400) {
                                withCredentials(bindings: [
                                file(credentialsId:'Azure_Secrets_TESTONLY_File', variable: 'Azure_Secrets_File')]) {
                                    dir ("${distro}-${env.BUILD_NUMBER}-${env.BRANCH_NAME}") {
                                        cleanWs()
                                        git branch: LISAV2_BRANCH, url: LISAV2_REMOTE
                                        echo "Run-LisaV2.ps1 -TestPlatform 'Azure' -ARMImageName '${ARM_DISTRO}' -RGIdentifier '${AZURE_ID}' -TestLocation '${AZURE_LOCATION}' -CustomKernel '${KERNEL_TYPE}' ${test_cmd} -XMLSecretFile '${Azure_Secrets_File}'"
                                        RunPowershellCommand(".\\Run-LisaV2.ps1" +
                                            " -TestLocation '${AZURE_LOCATION}'" +
                                            " -RGIdentifier '${AZURE_ID}'" +
                                            " -TestPlatform 'Azure'" +
                                            " -CustomKernel '${KERNEL_TYPE}'" +
                                            " -ARMImageName '${ARM_DISTRO}'" +
                                            " -XMLSecretFile '${Azure_Secrets_File}'" +
                                            " -EnableTelemetry" +
                                            " -ExitWithZero" +
                                            " ${test_cmd}"
                                        )
                                        archiveArtifacts '*-TestLogs.zip'
                                        junit "Report\\*-junit.xml"
                                        deleteDir()
                                    }
                                }
                            }
                        } catch (exc) {
                            println exc
                            println "Azure-Validation-${test_type}: STAGE_FAILED_EXCEPTION."
                            currentBuild.result = 'SUCCESS'
                        } finally {
                            echo "Cleaning up environment"
                        }
                    }
                }
            }
        }
        parallel runs
    }
} else {
    echo "Skipping Azure validation"
}

if ((env.platform == PLATFORM_ALL) || (env.platform == PLATFORM_HYPERV)) {
    stage ("HyperV-Validation-${env.distro}-${env.kernel}") {
        def runs = [:]
        HYPERV_VALIDATION_TESTS_HASH.each() {
            def test_type = it.key
            def test_cmd = it.value
            runs["${test_type}"] = {
                stage ("${test_type}") {
                    if (test_cmd.contains("TestArea 'SRIOV'")){
                        LABEL_NAME = LABEL_SRIOV
                    } else {
                        LABEL_NAME = LABEL_WS2016
                    }
                    node ("${LABEL_NAME}") {
                        try {
                            timeout (32400) {
                                withCredentials(bindings: [
                                string(credentialsId:'SRIOV_TEST_LOCATION', variable: 'SRIOV_TEST_LOCATION'),
                                string(credentialsId:'LISAV2_IMAGES_SHARE_URL', variable: 'LISAV2_IMAGES_SHARE_URL'),
                                file(credentialsId:'HYPERV_LISAV2_SECRETS', variable: 'HYPERV_LISAV2_SECRETS')]) {
                                    dir ("${test_type}-${env.BUILD_NUMBER}-${env.BRANCH_NAME}") {
                                        cleanWs()
                                        git branch: LISAV2_BRANCH, url: LISAV2_REMOTE
                                        if (test_cmd.contains("TestArea 'SRIOV'")){
                                            test_location = "${SRIOV_TEST_LOCATION}"
                                        } else {
                                            test_location = "localhost"
                                        }
                                        HYPERV_VHD_PATH = "${LISAV2_IMAGES_SHARE_URL}${HYPERV_VHD}"
                                        echo "Run-LisaV2.ps1 -TestPlatform 'HyperV' -OsVHD ${HYPERV_VHD_PATH} -RgIdentifier 'ubuntuAzure${distro}' -TestLocation '${test_location}' -CustomKernel '${KERNEL_TYPE}' ${test_cmd} -XMLSecretFile '${HYPERV_LISAV2_SECRETS}'"
                                        RunPowershellCommand(".\\Run-LisaV2.ps1" +
                                            " -TestLocation '${test_location}'" +
                                            " -RGIdentifier 'ubuntuAzure${distro}'" +
                                            " -TestPlatform 'HyperV'" +
                                            " -CustomKernel '${KERNEL_TYPE}'" +
                                            " -OsVHD '${HYPERV_VHD_PATH}'" +
                                            " -XMLSecretFile '${HYPERV_LISAV2_SECRETS}'" +
                                            " -EnableTelemetry" +
                                            " -ExitWithZero" +
                                            " ${test_cmd}"
                                        )
                                        archiveArtifacts '*-TestLogs.zip'
                                        junit "Report\\*-junit.xml"
                                        deleteDir()
                                    }
                                }
                            }
                        } catch (exc) {
                            println exc
                            println "HyperV-Validation-${test_type}: STAGE_FAILED_EXCEPTION."
                            currentBuild.result = 'SUCCESS'
                        } finally {
                            echo "Cleaning up environment"
                        }
                    }
                }
            }
        }
        parallel runs
    }
} else {
    echo "Skipping Hyper-V validation"
}

if (env.performance == "yes") {
    stage ("Performance-${env.distro}-${env.kernel}") {
        def runs = [:]
        AZURE_PERFORMANCE_TESTS_HASH.each() {
            def test_type = it.key
            def test_cmd = it.value
            runs["${test_type}"] = {
                stage ("${test_type}") {
                    node ("azure"){
                        try {
                            timeout (43200) {
                                withCredentials(bindings: [
                                file(credentialsId:'Azure_Secrets_TESTONLY_File', variable: 'Azure_Secrets_File')]) {
                                    dir ("${distro}-${env.BUILD_NUMBER}-${env.BRANCH_NAME}") {
                                        cleanWs()
                                        git branch: LISAV2_BRANCH, url: LISAV2_REMOTE
                                        echo "Run-LisaV2.ps1 -TestPlatform 'Azure' -ARMImageName '${ARM_DISTRO}' -RGIdentifier '${AZURE_ID}' -TestLocation '${AZURE_LOCATION_DEFAULT}' -CustomKernel '${KERNEL_TYPE}' ${test_cmd} -XMLSecretFile '${Azure_Secrets_File}'"
                                        RunPowershellCommand(".\\Run-LisaV2.ps1" +
                                            " -TestLocation '${AZURE_LOCATION_DEFAULT}'" +
                                            " -RGIdentifier '${AZURE_ID}'" +
                                            " -TestPlatform 'Azure'" +
                                            " -CustomKernel '${KERNEL_TYPE}'" +
                                            " -ARMImageName '${ARM_DISTRO}'" +
                                            " -XMLSecretFile '${Azure_Secrets_File}'" +
                                            " -EnableTelemetry" +
                                            " -ExitWithZero" +
                                            " ${test_cmd}"
                                        )
                                        archiveArtifacts '*-TestLogs.zip'
                                        junit "Report\\*-junit.xml"
                                        deleteDir()
                                    }
                                }
                            }
                        } catch (exc) {
                            println exc
                            println "Azure-${test_type}: STAGE_FAILED_EXCEPTION."
                            currentBuild.result = 'SUCCESS'
                        } finally {
                            echo "Cleaning up environment"
                        }
                    }
                }
            }
        }
        parallel runs
    }
} else {
    echo "Skipping Azure Performance"
}

if (env.sendMail == "yes"){
    node ("meta_slave") {
        stage('Send-email') {
            withCredentials([string(credentialsId: 'MAIL_LIST', variable: 'MAIL_LIST')]) {
                echo "Send email with kernel validation results link"
                if (env.kernel == "linux-azure") {
                    version_identifier = "_azure"
                } else {
                    version_identifier = "_edge"
                }
                kernels_info = readFile (LATEST_VERSION_LOCATION)
                kernels_info = kernels_info.split("\n")
                kernels_info.each {
                    if (it.contains("${env.distro}${version_identifier}")) {
                        latest_kernel_version = it.split("=")[1]
                    }
                }
                emailext (
                    subject: "Test results for ${env.distro} ${latest_kernel_version} ${env.kernel} kernel",
                    to: "${env.MAIL_LIST}",
                    mimeType : "text/html",
                    body: '${SCRIPT, template="ubuntu.template"}'
                )
            }
        }
    }
}
