#!/usr/bin/env groovy

def RunPowershellCommand(psCmd) {
    bat "powershell.exe -NonInteractive -ExecutionPolicy Bypass -Command \"[Console]::OutputEncoding=[System.Text.Encoding]::UTF8;$psCmd;EXIT \$global:LastExitCode\""
}

properties ([
    parameters([
        choice (name: 'Distro', choices: 'trusty\nxenial\nbionic\ncosmic', 
                description: 'trusty - 14.04 validation <br> xenial - 16.04 validation <br> bionic - 18.04 validation <br> cosmic - 18.10 validation'),
        choice (name: 'Kernel', choices: 'linux-azure\nlinux-azure-edge',
                description: 'linux-azure - latest proposed linux-azure kernel validation <br> linux-azure-edge - latest proposed linux-azure-edge kernel validation'),
        choice (name: 'Platform', choices: 'azure\nhyperv\nall',
                description: 'azure - only Azure validation <br> all - all platforms validation <br> hyperv - only Hyper-V validation'),
        choice (name: 'Performance', choices: 'yes\nno',
                description: 'yes - will do Azure Performance testing <br> no - Azure Performance testing will be skipped'),
        choice (name: 'sendMail', choices: 'no\nyes',
                description: 'no - will not send mail <br> yes - will send mail')
    ])
])

def ARM_DISTRO_HASH = [trusty:'Canonical UbuntuServer 14.04.5-LTS latest',
                  xenial:'Canonical UbuntuServer 16.04-LTS latest',
                  bionic:'Canonical UbuntuServer 18.04-LTS latest',
                  cosmic:'Canonical UbuntuServer 18.10 latest']
def HYPERV_VHD_HASH = [trusty:'Ubuntu_14.04.5\\Ubuntu14.04.5-server.vhdx',
                  xenial:'ubuntu_16.04.5\\ubuntu_16.04.5.vhdx',
                  bionic:'ubuntu_18.04.1\\ubuntu_18.04.1_gen1_gen2.vhdx',
                  cosmic:'ubuntu_18.10\\ubuntu_18.10_gen1_gen2.vhdx']
def HYPERV_VALIDATION_TESTS_HASH = [BVT:"-TestCategory 'BVT'",
    FUNCTIONAL_COMMON:"-TestCategory 'Functional' -TestArea 'CORE,KVP,KDUMP,STORAGE'",
    FUNCTIONAL_EXTRA:"-TestCategory 'Functional' -TestArea 'FCOPY,LIS,NETWORK,PROD_CHECKPOINT,DYNAMIC_MEMORY,RUNTIME_MEMORY,BACKUP'",
    FUNCTIONAL_SRIOV:"-TestCategory 'Functional' -TestArea 'SRIOV'"]
def AZURE_VALIDATION_TESTS_HASH = [BVT:"-TestCategory 'BVT'",
    FUNCTIONAL_COMMON:"-TestCategory 'Functional' -TestArea 'CORE,KVP,KDUMP,STORAGE'",
    FUNCTIONAL_SRIOV:"-TestCategory 'Functional' -TestArea 'SRIOV'"]
def AZURE_PERFORMANCE_TESTS_HASH = [PERFORMANCE_NETWORK:"-TestCategory 'Performance' -TestArea 'Network'",
    PERFORMANCE_STORAGE:"-TestCategory 'Performance' -TestArea 'Storage'"]
LATEST_VERSION_LOCATION="/home/lisa/latest_versions.sh"
PLATFORM_HYPERV = "hyperv"
PLATFORM_AZURE = "azure"
PLATFORM_ALL = "all"
LABEL_SRIOV = "sriov_mlnx"
LABEL_WS2016 = "ws2016"
LISAV2_REMOTE = "https://github.com/lis/LISAv2.git"
LISAV2_BRANCH = "master"
AZURE_LOCATION = "westus2"
AZURE_ID = "ubuntuAz"

def ARM_DISTRO = ARM_DISTRO_HASH.find{it.key == env.distro}.value
def HYPERV_VHD = HYPERV_VHD_HASH.find{it.key == env.distro}.value

if (env.kernel == "linux-azure") {
    KERNEL_TYPE = "proposed-azure"
}
if (env.kernel == "linux-azure-edge"){
    KERNEL_TYPE = "proposed-edge"
}

if ((env.platform == PLATFORM_ALL) || (env.platform == PLATFORM_AZURE)) {
    stage ("Azure-Validation-${env.distro}-${env.kernel}") {
        def runs = [:]
        AZURE_VALIDATION_TESTS_HASH.each() {
            def test_type = it.key
            def test_cmd = it.value
            runs["${test_type}"] = {
                stage ("${test_type}") {
                    node ("azure"){
                        try {
                            timeout (32400) {
                                withCredentials(bindings: [
                                file(credentialsId:'GLOBAL_LISAV2_SECRETS', variable: 'GLOBAL_LISAV2_SECRETS')]) {
                                    dir ("${distro}-${env.BUILD_NUMBER}-${env.BRANCH_NAME}") {
                                        cleanWs()
                                        git branch: LISAV2_BRANCH, url: LISAV2_REMOTE
                                        echo "Run-LisaV2.ps1 -TestPlatform 'Azure' -ARMImageName '${ARM_DISTRO}' -RGIdentifier '${AZURE_ID}' -TestLocation '${AZURE_LOCATION}' -CustomKernel '${KERNEL_TYPE}' ${test_cmd} -XMLSecretFile '${GLOBAL_LISAV2_SECRETS}'"
                                        RunPowershellCommand(".\\Run-LisaV2.ps1" +
                                            " -TestLocation '${AZURE_LOCATION}'" +
                                            " -RGIdentifier '${AZURE_ID}'" +
                                            " -TestPlatform 'Azure'" +
                                            " -CustomKernel '${KERNEL_TYPE}'" +
                                            " -ARMImageName '${ARM_DISTRO}'" +
                                            " -XMLSecretFile '${GLOBAL_LISAV2_SECRETS}'" +
                                            " -ExitWithZero" +
                                            " ${test_cmd}"
                                        )
                                        junit "report\\*-junit.xml"
                                        archiveArtifacts "TestResults\\**\\*"
                                        deleteDir()
                                    }
                                }
                            }
                        } catch (exc) {
                            println exc
                            println "Azure-Validation-${test_type}: STAGE_FAILED_EXCEPTION."
                            currentBuild.result = 'SUCCESS'
                        } finally {
                            echo "Cleaning up environment"
                        }
                    }
                }
            }
        }
        parallel runs
    }
} else {
    echo "Skipping Azure validation"
}

if ((env.platform == PLATFORM_ALL) || (env.platform == PLATFORM_HYPERV)) {
    stage ("HyperV-Validation-${env.distro}-${env.kernel}") {
        def runs = [:]
        HYPERV_VALIDATION_TESTS_HASH.each() {
            def test_type = it.key
            def test_cmd = it.value
            runs["${test_type}"] = {
                stage ("${test_type}") {
                    if (test_cmd.contains("SRIOV")){
                        LABEL_NAME = LABEL_SRIOV
                    } else {
                        LABEL_NAME = LABEL_WS2016
                    }
                    node ("${LABEL_NAME}") {
                        try {
                            timeout (32400) {
                                withCredentials(bindings: [
                                string(credentialsId:'SRIOV_TEST_LOCATION', variable: 'SRIOV_TEST_LOCATION'),
                                string(credentialsId:'SRIOV_VHD_LOCATION', variable: 'SRIOV_VHD_LOCATION'),
                                string(credentialsId:'LISAV2_IMAGES_SHARE_URL', variable: 'LISAV2_IMAGES_SHARE_URL'),
                                file(credentialsId:'GLOBAL_LISAV2_SECRETS', variable: 'GLOBAL_LISAV2_SECRETS')]) {
                                    dir ("${test_type}-${env.BUILD_NUMBER}-${env.BRANCH_NAME}") {
                                        cleanWs()
                                        git branch: LISAV2_BRANCH, url: LISAV2_REMOTE
                                        if (test_cmd.contains("SRIOV")){
                                            test_location = "${SRIOV_TEST_LOCATION}"
                                            HYPERV_VHD_PATH = "${SRIOV_VHD_LOCATION}${HYPERV_VHD}"
                                        } else {
                                            test_location = "localhost"
                                            HYPERV_VHD_PATH = "${LISAV2_IMAGES_SHARE_URL}${HYPERV_VHD}"
                                        }
                                        echo "Run-LisaV2.ps1 -TestPlatform 'HyperV' -OsVHD ${HYPERV_VHD_PATH} -RgIdentifier 'ubuntuAzure${distro}' -TestLocation '${test_location}' -CustomKernel '${KERNEL_TYPE}' ${test_cmd} -XMLSecretFile '${GLOBAL_LISAV2_SECRETS}'"
                                        RunPowershellCommand(".\\Run-LisaV2.ps1" +
                                            " -TestLocation '${test_location}'" +
                                            " -RGIdentifier 'ubuntuAzure${distro}'" +
                                            " -TestPlatform 'HyperV'" +
                                            " -CustomKernel '${KERNEL_TYPE}'" +
                                            " -OsVHD '${HYPERV_VHD_PATH}'" +
                                            " -XMLSecretFile '${GLOBAL_LISAV2_SECRETS}'" +
                                            " -ForceDeleteResources" +
                                            " -ExitWithZero" +
                                            " ${test_cmd}"
                                        )
                                        junit "report\\*-junit.xml"
                                        archiveArtifacts "TestResults\\**\\*"
                                        deleteDir()
                                    }
                                }
                            }
                        } catch (exc) {
                            println exc
                            println "HyperV-Validation-${test_type}: STAGE_FAILED_EXCEPTION."
                            currentBuild.result = 'SUCCESS'
                        } finally {
                            echo "Cleaning up environment"
                        }
                    }
                }
            }
        }
        parallel runs  
    }
} else {
    echo "Skipping Hyper-V validation"
}

if (env.performance == "yes") {
    stage ("Performance-${env.distro}-${env.kernel}") {
        def runs = [:]
        AZURE_PERFORMANCE_TESTS_HASH.each() {
            def test_type = it.key
            def test_cmd = it.value
            runs["${test_type}"] = {
                stage ("${test_type}") {
                    node ("azure"){
                        try {
                            timeout (43200) {
                                withCredentials(bindings: [
                                file(credentialsId:'GLOBAL_LISAV2_SECRETS', variable: 'GLOBAL_LISAV2_SECRETS')]) {
                                    dir ("${distro}-${env.BUILD_NUMBER}-${env.BRANCH_NAME}") {
                                        cleanWs()
                                        git branch: LISAV2_BRANCH, url: LISAV2_REMOTE
                                        echo "Run-LisaV2.ps1 -TestPlatform 'Azure' -ARMImageName '${ARM_DISTRO}' -RGIdentifier '${AZURE_ID}' -TestLocation '${AZURE_LOCATION}' -CustomKernel '${KERNEL_TYPE}' ${test_cmd} -XMLSecretFile '${GLOBAL_LISAV2_SECRETS}'"
                                        RunPowershellCommand(".\\Run-LisaV2.ps1" +
                                            " -TestLocation '${AZURE_LOCATION}'" +
                                            " -RGIdentifier '${AZURE_ID}'" +
                                            " -TestPlatform 'Azure'" +
                                            " -CustomKernel '${KERNEL_TYPE}'" +
                                            " -ARMImageName '${ARM_DISTRO}'" +
                                            " -XMLSecretFile '${GLOBAL_LISAV2_SECRETS}'" +
                                            " -ExitWithZero" +
                                            " ${test_cmd}"
                                        )
                                        junit "report\\*-junit.xml"
                                        archiveArtifacts "TestResults\\**\\*"
                                        deleteDir()
                                    }
                                }
                            }
                        } catch (exc) {
                            println exc
                            println "Azure-${test_type}: STAGE_FAILED_EXCEPTION."
                            currentBuild.result = 'SUCCESS'
                        } finally {
                            echo "Cleaning up environment"
                        }
                    }
                }
            }
        }
        parallel runs
    }
} else {
    echo "Skipping Azure Performance"
}

if (env.sendMail == "yes"){
    node ("meta_slave") {
        stage('Send-email') {
            withCredentials([string(credentialsId: 'MAIL_LIST', variable: 'MAIL_LIST')]) {
                echo "Send email with kernel validation results link"
                if (env.kernel == "linux-azure") {
                    version_identifier = "_azure"
                } else {
                    version_identifier = "_edge" 
                }
                kernels_info = readFile (LATEST_VERSION_LOCATION)
                kernels_info = kernels_info.split("\n")
                kernels_info.each {
                    if (it.contains("${env.distro}${version_identifier}")) {
                        latest_kernel_version = it.split("=")[1]
                    }
                }
                emailext (
                    subject: "Test results for ${env.distro} ${latest_kernel_version} ${env.kernel} kernel",
                    to: "${env.MAIL_LIST}",
                    mimeType : "text/html",
                    body: """
                        Hello,<br/><br/>
                        Validation and Performance have been run for ${env.distro} ${latest_kernel_version} ${env.kernel} kernel.
                        You can check the results at the following link:<br>
                        ${env.RUN_DISPLAY_URL} <br/><br/>
                        Thank you,<br/>Jenkins CI
                    """
                )
            }
        }
    } 
}