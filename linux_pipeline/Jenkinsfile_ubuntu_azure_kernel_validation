#!/usr/bin/env groovy

def PowerShellWrapper(psCmd) {
    psCmd = psCmd.replaceAll("\r", "").replaceAll("\n", "")
    def exitCode = bat (returnStatus: true, script: "powershell.exe -NonInteractive -ExecutionPolicy Bypass -Command \"\$ErrorActionPreference='Stop';[Console]::OutputEncoding=[System.Text.Encoding]::UTF8;$psCmd;EXIT \$global:LastExitCode\"")
    return exitCode
}

def RunPowershellCommand(psCmd) {
    bat "powershell.exe -NonInteractive -ExecutionPolicy Bypass -Command \"[Console]::OutputEncoding=[System.Text.Encoding]::UTF8;$psCmd;EXIT \$global:LastExitCode\""
}

properties ([
    parameters([
        choice (name: 'Distro', choices: 'trusty\nxenial\nbionic\nall', 
                description: 'trusty - only Trusty validation <br> xenial - only Xenial validation <br> bionic - only Bionic validation <br> all - all distros validation <br>'),
        choice (name: 'Kernel', choices: 'all\nlinux-azure\nlinux-azure-edge',
                description: ' all - all kernels validation <br> linux-azure - only linux-azure kernel validation <br> linux-azure-edge - only linux-azure-edge kernel validation - KERNEL NOT SUPPORTED ON AZURE <br>'),
        choice (name: 'Platform', choices: 'all\nhyperv\nazure',
                description: '<br> all - all platforms validation <br> hyperv - only Hyper-V validation <br> azure - only Azure validation')
    ])
])

distroToTest = []
DISTRO_BIONIC = "bionic"
DISTRO_XENIAL = "xenial"
DISTRO_TRUSTY = "trusty"
DISTRO_BIONIC_EDGE = "bionic-edge"
DISTRO_XENIAL_EDGE = "xenial-edge"
DISTRO_TRUSTY_EDGE = "trusty-edge"
DISTRO_ALL = "all"

KERNEL_AZURE = "linux-azure"
KERNEL_AZURE_EDGE = "linux-azure-edge"
KERNEL_ALL = "all"

PLATFORM_HYPERV = "hyperv"
PLATFORM_AZURE = "azure"
PLATFORM_ALL = "all"

HYPERV_PARAMS_AZURE = "azure_kernel=yes; azure_kernel_edge=no"
HYPERV_PARAMS_AZURE_EDGE = "azure_kernel=no; azure_kernel_edge=yes"
HYPERV_XML = "ubuntu_azure_kernel_fvt.xml"
TRUSTY_VERSION = "Ubuntu_14.04.5"
XENIAL_VERSION = "ubuntu_16.04.5"
BIONIC_VERSION = "Ubuntu_18.04"

AZURE_LINUX_AUTOMATION_REPO = "https://github.com/LIS/azure-linux-automation.git"
ARM_TRUSTY = "Canonical UbuntuServer 14.04.5-LTS latest"
ARM_XENIAL = "Canonical UbuntuServer 16.04-LTS latest"
ARM_BIONIC = "Canonical UbuntuServer 18.04-LTS latest"
PROPOSED_AZURE = "proposed"
PROPOSED_EDGE = "proposed-edge"

def AddDistroToTest (distroBionic, distroXenial, distroTrusty) {
    if (env.distro == DISTRO_ALL) {
        distroToTest.add(distroBionic)
        distroToTest.add(distroXenial)
        distroToTest.add(distroTrusty)
    }
    if (env.distro == DISTRO_BIONIC) {
        distroToTest.add(distroBionic)
    }
    if (env.distro == DISTRO_XENIAL) {
        distroToTest.add(distroXenial)
    }
    if (env.distro == DISTRO_TRUSTY) {
        distroToTest.add(distroTrusty)
    }
}

if ((env.kernel == KERNEL_ALL) || (env.kernel == KERNEL_AZURE)) {   
    AddDistroToTest (DISTRO_BIONIC, DISTRO_XENIAL, DISTRO_TRUSTY)
}

if ((env.kernel == KERNEL_ALL) || (env.kernel == KERNEL_AZURE_EDGE)) {
    AddDistroToTest (DISTRO_BIONIC_EDGE, DISTRO_XENIAL_EDGE, DISTRO_TRUSTY_EDGE)
}

stage ("Validation") {
    parallel "Hyper-V": {
        if ((env.platform == PLATFORM_ALL) || (env.platform == PLATFORM_HYPERV)) {
            def runNumber = 1
            def runs = [:]
            distroToTest.each() {
                def distro = it
                runs["${distro}-HyperV"] = {
                    stage ("${distro}-HyperV") {
                        node ("ws2016") {
                            withCredentials(bindings: [
                            string(credentialsId:'LISA_IMAGES_SHARE_URL', variable: 'LISA_IMAGES_SHARE_URL'),
                            string(credentialsId:'LISA_TEST_DEPENDENCIES', variable: 'LISA_TEST_DEPENDENCIES')]) {
                                dir ("${distro}-${env.BUILD_NUMBER}-${env.BRANCH_NAME}") {
                                    checkout scm
                                    if ((distro == DISTRO_XENIAL_EDGE) || (distro == DISTRO_XENIAL)) {
                                        distroVersion = XENIAL_VERSION
                                        if (distro == DISTRO_XENIAL_EDGE) {
                                            testParams = HYPERV_PARAMS_AZURE_EDGE
                                        } else {
                                            testParams = HYPERV_PARAMS_AZURE
                                        }
                                    }
                                    if ((distro == DISTRO_BIONIC_EDGE) || (distro == DISTRO_BIONIC)) {
                                        distroVersion = BIONIC_VERSION
                                        if (distro == DISTRO_BIONIC_EDGE) {
                                            testParams = HYPERV_PARAMS_AZURE_EDGE
                                        } else {
                                            testParams = HYPERV_PARAMS_AZURE
                                        }
                                    }
                                    if ((distro == DISTRO_TRUSTY_EDGE) || (distro == DISTRO_TRUSTY)) {
                                        distroVersion = TRUSTY_VERSION
                                        if (distro == DISTRO_TRUSTY_EDGE) {
                                            testParams = HYPERV_PARAMS_AZURE_EDGE
                                        } else {
                                            testParams = HYPERV_PARAMS_AZURE
                                        }
                                    }
                                    echo "Test params: ${testParams}"
                                    echo "Distro version: ${distroVersion}"
                                    echo 'Running LISA...'
                                    PowerShellWrapper("""
                                        & '.\\scripts\\lis_hyperv_platform\\main-lis-rpm.ps1'
                                            -JobId '${distro}-d-${BUILD_NUMBER}'
                                            -InstanceName '${distro}'
                                            -DistroVersion '${distroVersion}' -WorkingDirectory 'C:\\workspace'
                                            -LISAImagesShareUrl '${LISA_IMAGES_SHARE_URL}' 
                                            -XmlTest '${HYPERV_XML}'
                                            -LisaTestDependencies '${LISA_TEST_DEPENDENCIES}'
                                            -LisaOptionalParams '${testParams}'
                                        """)
                                deleteDir()
                                }
                            }
                        }
                    }
                }
            }
            parallel runs
        } else {
            echo "Skipping Hyper-V validation"
        }
    },
    "Azure": {
        node ("azure") {
            if ((env.platform == PLATFORM_ALL) || (env.platform == PLATFORM_AZURE)) {
                def runNumber = 1
                def runs = [:]
                distroToTest.each() {
                    def distro = it
                    runs["${distro}-Azure"] = {
                        stage ("${distro}-Azure") {
                        withCredentials(bindings: [
                        file(credentialsId:'Azure_Secrets_File', variable: 'Azure_Secrets_File')]) {
                            echo "Azure is running"
                            dir ("${distro}-${env.BUILD_NUMBER}-${env.BRANCH_NAME}") {
                                git AZURE_LINUX_AUTOMATION_REPO
                                if ((distro == DISTRO_TRUSTY_EDGE) || (distro == DISTRO_TRUSTY)) {
                                    armVMImage = ARM_TRUSTY
                                    if (distro == DISTRO_TRUSTY_EDGE) {
                                        testParams = PROPOSED_EDGE
                                    } else {
                                        testParams = PROPOSED_AZURE
                                    }
                                }
                                if ((distro == DISTRO_XENIAL_EDGE) || (distro == DISTRO_XENIAL)) {
                                    armVMImage = ARM_XENIAL
                                    if (distro == DISTRO_XENIAL_EDGE) {
                                        testParams = PROPOSED_EDGE
                                    } else {
                                        testParams = PROPOSED_AZURE
                                    }
                                }
                                if ((distro == DISTRO_BIONIC_EDGE) || (distro == DISTRO_BIONIC)) {
                                    armVMImage = ARM_BIONIC
                                    if (distro == DISTRO_BIONIC_EDGE) {
                                        testParams = PROPOSED_EDGE
                                    } else {
                                        testParams = PROPOSED_AZURE
                                    }
                                }
                                RunPowershellCommand(".\\RunAzureTests.ps1" +
                                " -BuildNumber '${BUILD_NUMBER}'" +
                                " -testLocation 'westus2'" +
                                " -DistroIdentifier '${distro}'" +
                                " -testCycle 'BVT'" +
                                " -testIterations '1'" +
                                " -customSecretsFilePath '${Azure_Secrets_File}'" +
                                " -ArchiveLogDirectory 'Z:\\Logs_Azure'" +
                                " -StorageAccount 'ExistingStorage_Standard'" +
                                " -ARMImageName '${armVMImage}'" +
                                " -OverrideVMSize 'Standard_D2_v2'" +
                                " -customKernel '${testParams}'" +
                                " -coureCountExceededTimeout '3600'" +
                                " -ExitWithZero"
                                )
                                junit "report\\*-junit.xml"
                                RunPowershellCommand(".\\Extras\\AnalyseAllResults.ps1")
                            deleteDir()
                            }
                        }
                        }
                    }
                }
                parallel runs
            } else {
                echo "Skipping Azure validation"
            }
        }
    }
}
