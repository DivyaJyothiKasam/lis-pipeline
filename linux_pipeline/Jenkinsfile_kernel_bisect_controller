#!/usr/bin/env groovy

env.SLAVE_PIPELINE_NAME = "pipeline-kernel-bisect-runner"
env.BUILD_KERNEL_ARTIFACTS = "true"
env.PARAM_SEPARATOR_STYLE = 'font-size: 15px; font-weight: 600;'

// bisect cannot run more than 20 times as that means that it bisected more than 1.000.000 commits,
// whereas the linux kernel code has no more than 700k commits on December 2018.
env.BISECT_MAX_RUNS = 20
env.BISECT_RUNS = 0
env.BISECT_BUILD_DIR = "/mnt/tmp/bisect"
env.BISECT_CLONE_DIR = "kernel_tree"
env.BISECT_CLONE_KERNEL_REPO = "true"
env.BISECT_VALIDATE_INITIAL_GOOD_BAD = "true"

properties ([
    overrideIndexTriggers(false),
    [$class: 'ParametersDefinitionProperty',
        parameterDefinitions: [
        [$class: 'ChoiceParameterDefinition',
            choices: """git://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git\nhttps://git.kernel.org/pub/scm/linux/kernel/git/davem/net-next.git\ngit://git.launchpad.net/~canonical-kernel/ubuntu/+source/linux-azure""",
            name: 'KERNEL_GIT_URL',
            description: 'What Kernel tree repo.'],
        [$class: 'StringParameterDefinition',
            name: 'KERNEL_GIT_BRANCH',
            defaultValue: 'master',
            description: 'Branch to be built.'],
        [$class: 'StringParameterDefinition',
            name: 'GOOD_COMMIT',
            defaultValue: '',
            description: 'Good commit. Parameter required.'],
        [$class: 'StringParameterDefinition',
            name: 'BAD_COMMIT',
            defaultValue: 'HEAD',
            description: 'Bad commit (can be HEAD).'],
        [$class: 'ChoiceParameterDefinition',
            choices: 'Ubuntu_18.04.1\nCentOS_7.5',
            name: 'DISTRO_VERSION',
            description: 'Distro version to be tested.'],
        [$class: 'ChoiceParameterDefinition',
            choices: 'Boot\nFunctional\nPerformance',
            name: 'BISECT_TYPE',
            description: 'Type of bisect that will be performed.'],
        [$class: 'ChoiceParameterDefinition',
            choices: 'Standard_A2\nStandard_E64_v3',
            name: 'BOOT_FLAVOR_SIZE',
            description: 'The Azure flavor size used for boot validation']
        ]
    ]
])


// ****************
// PIPELINE HELPERS
// ****************

def cloneKernelRepo() {
    stage ("clone_kernel") {
        sh '''#!/bin/bash
            set -xe
            mkdir -p $BISECT_BUILD_DIR
            pushd $BISECT_BUILD_DIR
              if [[ -d $BISECT_CLONE_DIR ]];then
                rm -rf "${BISECT_CLONE_DIR}"
              fi

              git clone $KERNEL_GIT_URL $BISECT_CLONE_DIR
              pushd $BISECT_CLONE_DIR
                git config --global gc.auto 0
                git checkout -f $KERNEL_GIT_BRANCH
              popd
            popd
            '''
        println "Finished cloning Git repo."
    }
}

def validateInitialCommits() {
    stage("validate_commits") {
        validateCommit(params.BAD_COMMIT, "FAILURE")
        println("Bad commit " + params.BAD_COMMIT + " has been validated to be bad")
        validateCommit(params.GOOD_COMMIT, "SUCCESS")
        println("Good commit " + params.GOOD_COMMIT + " has been validated to be good")
    }
}

def validateCommit (String commit, String expectedState) {
    if (!commit) {
        throw new Exception("Commit " + commit + " is not valid.")
    }
    job = buildJobWrapper(commit)
    if (job.buildResult != expectedState) {
        throw new Exception("Commit " + commit + " was expected to be " + expectedState + " instead of " + job.buildResult)
    }
}

def buildJobWrapper(String commit) {
    if (!commit) {
        throw new Exception("Commit " + commit + " is not valid.")
    }
    def bisectParams = getCommonParams("bisect", commit)
    def job = build job: "${env.SLAVE_PIPELINE_NAME}/${env.BRANCH_NAME}",
                               parameters: bisectParams, propagate: false, wait: true;
    return ["buildResult": job.result]
}

String getCommit(String passed) {
    env.passed = passed
    def commit = sh(
        script: '''#!/bin/bash
            set -xe
            pushd "$BISECT_BUILD_DIR/$BISECT_CLONE_DIR" 2>&1 > /dev/null
            output=$(git bisect $passed)
            popd 2>&1 > /dev/null
            final=$(echo $output | grep 'first bad commit' | wc -l)
            commit_id=${output##*[}
            commit_id=${commit_id%%]*}
            if [[ "$final" != "0" ]]; then
                echo $output
                exit 0
            fi
            echo $commit_id
        ''',
        returnStdout: true
    )
    if (commit.contains("first bad commit")) {
        println("Bisect finished succesfully. Bad commit is " + commit.split(" ")[0])
        currentBuild.displayName = "$BUILD_NUMBER-" + commit.substring(0,7)
        return false
    }
    return commit
}

def getCurrentCommitId() {
    return sh(
        script: '''#!/bin/bash
           set -e
           pushd "$BISECT_BUILD_DIR/$BISECT_CLONE_DIR" 2>&1 > /dev/null
           unwanted_output=$(git bisect reset)
           output=$(git bisect start "$BAD_COMMIT" "$GOOD_COMMIT")
           output=${output%%]*}
           output=${output##*[}
           echo $output
           popd 2>&1 > /dev/null
        ''',
        returnStdout: true
    ).trim()
}


def getCommonParams(buildTag, commit) {
    return [
        string(name: 'KERNEL_GIT_URL', value: params.KERNEL_GIT_URL),
        string(name: 'KERNEL_GIT_BRANCH', value: commit),
        string(name: 'DISTRO_VERSION', value: params.DISTRO_VERSION),
        booleanParam(name: 'BUILD_KERNEL_ARTIFACTS', value: env.BUILD_KERNEL_ARTIFACTS.toBoolean()),
        booleanParam(name: 'PUBLISH_KERNEL_ARTIFACTS', value: false),
        booleanParam(name: 'RUN_AZURE_BOOT_TEST', value: params.BISECT_TYPE.equals("Boot")),
        string(name: 'CUSTOM_BUILD_TAG', value: "${buildTag}-${BUILD_NUMBER}")
    ]
}

// *************
// PIPELINE MAIN
// *************

node ("bisect_kernel_builder") {
    def currentCommitId = ""
    def passed = ""

    if (!params.GOOD_COMMIT) {
        throw new Exception("GOOD_COMMIT must be set.")
    }
    if (!params.BAD_COMMIT) {
        throw new Exception("BAD_COMMIT must be set.")
    }
    if (params.BAD_COMMIT.equals(params.GOOD_COMMIT)) {
        throw new Exception("BAD_COMMIT cannot be GOOD_COMMIT.")
    }

    if (env.BISECT_CLONE_KERNEL_REPO.equals("true")) {
        println "Clone kernel repo."
        cloneKernelRepo()
    }

    if (env.BISECT_VALIDATE_INITIAL_GOOD_BAD.equals("true")) {
        println "Validate initial good and bad commits."
        validateInitialCommits()
    }

    currentCommitId = getCurrentCommitId()
    if (currentCommitId.contains("first bad commit")) {
        println("Bisect finished succesfully. Bad commit is " + currentCommitId.split(" ")[0])
        currentBuild.displayName = "$BUILD_NUMBER-" + currentCommitId.substring(0,7)
        return
    }
    println "Initial bisection commit is: " + currentCommitId

    while (currentCommitId && env.BISECT_RUNS.toInteger() < env.BISECT_MAX_RUNS.toInteger()) {
        env.BISECT_RUNS = env.BISECT_RUNS.toInteger() + 1
        stage("bisect_" + currentCommitId.substring(0,7)) {
            println "Check if the following commit is good or bad: " + currentCommitId
            job = buildJobWrapper(currentCommitId)
            if (job.buildResult == 'SUCCESS') {
                println "The following commit is good: " + currentCommitId
                passed = 'good'
            } else if (job.buildResult == 'FAILURE') {
                println "The following commit is bad: " + currentCommitId
                passed = 'bad'
            } else {
                println "Bisect has been aborted because slave build result is not FAILURE or SUCCESS"
                println "Slave build result is: " + job.buildResult
                break
            }
        }
        currentCommitId = getCommit(passed)
        if (currentCommitId.equals(false)) {
            break
        }
    }

    if (env.BISECT_RUNS.equals(env.BISECT_MAX_RUNS)) {
        throw new Exception("Failed to finish bisection in the maximum allowed retries.")
    }
}